


type Node {
  id: ID!
  createdAt: DateTime! @search @inputP_RO
  createdBy: User! @inputP_RO
  parent: Node
  children: [Node!] @hasInverse(field: parent)
  type_: NodeType! @search
  name: String! @search(by: [term])
  nameid: String! @id @inputP_RO
  rootnameid: String! @search(by: [hash]) @inputP_RO
  mandate: Mandate
  tensions_out: [Tension!] @hasInverse(field: emitter) @inputP_RO
  tensions_in: [Tension!] @hasInverse(field: receiver) @inputP_RO
  n_tensions_out: Int @count(f: tensions_out)
  n_tensions_in: Int @count(f: tensions_in)
  n_children: Int @count(f: children)
  isRoot: Boolean! @search @inputP_RO
  first_link: User
  second_link: User
  skills: [String!] @search(by: [term])
  role_type: RoleType
}

type Post {
  id: ID!
  createdAt: DateTime! @search @inputP_RO
  createdBy: User! @inputP_RO
  message: String @search(by: [fulltext]) @inputP_isOwner(u:"createdBy")
}

type Tension {
  nth: String @search
  title: String! @search(by: [term])
  type_: TensionType! @search
  emitter: Node! @inputP_RO
  receiver: Node!
  comments: [Comment!]
  labels: [Label!]
  n_comments: Int @count(f: comments)
  id: ID!
  createdAt: DateTime! @search @inputP_RO
  createdBy: User! @inputP_RO
  message: String @search(by: [fulltext]) @inputP_isOwner(u:"createdBy")
}

type Comment {
  message: String! @search(by: [fulltext]) @inputP_isOwner(u:"createdBy")
  id: ID!
  createdAt: DateTime! @search @inputP_RO
  createdBy: User! @inputP_RO
}

type Mandate {
  purpose: String! @search(by: [fulltext]) @inputP_RO
  responsabilities: Post @inputP_RO
  domains: Post @inputP_RO
  id: ID!
  createdAt: DateTime! @search @inputP_RO
  createdBy: User! @inputP_RO
  message: String @search(by: [fulltext]) @inputP_isOwner(u:"createdBy")
}

type User {
  id: ID!
  createdAt: DateTime! @inputP_RO
  username: String! @id @inputP_RO
  email: String! @hidden @inputP_isOwner @search(by: [hash])
  emailHash: String @hidden @inputP_RO
  emailValidated: Boolean! @hidden @inputP_RO
  name: String @inputP_isOwner
  password: String! @hidden @inputP_isOwner
  roles: [Node!] @hasInverse(field: first_link) @inputP_RO
  backed_roles: [Node!] @hasInverse(field: second_link) @inputP_RO
  bio: String @inputP_isOwner
  utc: String @inputP_isOwner
}

type Label {
  id: ID!
  name: String! @id
  color: String
}

enum NodeType {
  Circle
  Role
}

enum TensionType {
  Governance
  Operational
  Personal
  Help


}

enum RoleType {
  Coordinator
  Member
  Guest


}
