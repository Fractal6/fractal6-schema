


directive @hidden on FIELD_DEFINITION

directive @count(f: String!) on FIELD_DEFINITION

directive @meta_getNodeStats on FIELD_DEFINITION

directive @alter_toLower(f: String!) on INPUT_FIELD_DEFINITION

directive @alter_minLength(f: String!, n: Int!) on INPUT_FIELD_DEFINITION

directive @alter_maxLength(f: String!, n: Int!) on INPUT_FIELD_DEFINITION

directive @alter_unique(f: String!, s: String) on INPUT_FIELD_DEFINITION

directive @hidePrivate on OBJECT|FIELD_DEFINITION

directive @patch_hasRole(n: [String!]!, u: String, a: Int) on INPUT_FIELD_DEFINITION

directive @alter_hasRole(n: [String!]!, u: String, a: Int) on INPUT_FIELD_DEFINITION

directive @alter_hasRoot(n: [String!]!) on INPUT_FIELD_DEFINITION

directive @add_isOwner(u: String) on INPUT_FIELD_DEFINITION

directive @patch_isOwner(u: String) on INPUT_FIELD_DEFINITION

directive @patch_RO on INPUT_FIELD_DEFINITION

directive @alter_RO on INPUT_FIELD_DEFINITION

directive @hook_getNode on ARGUMENT_DEFINITION

directive @hook_queryNode on ARGUMENT_DEFINITION

directive @hook_addNode on ARGUMENT_DEFINITION

directive @hook_addNodePost on FIELD_DEFINITION

directive @hook_updateNode on ARGUMENT_DEFINITION

directive @hook_updateNodePost on FIELD_DEFINITION

directive @hook_getTension on ARGUMENT_DEFINITION

directive @hook_queryTension on ARGUMENT_DEFINITION

directive @hook_addTension on ARGUMENT_DEFINITION

directive @hook_addTensionPost on FIELD_DEFINITION

directive @hook_updateTension on ARGUMENT_DEFINITION

directive @hook_updateTensionPost on FIELD_DEFINITION

directive @hook_getComment on ARGUMENT_DEFINITION

directive @hook_queryComment on ARGUMENT_DEFINITION

directive @hook_addComment on ARGUMENT_DEFINITION

directive @hook_addCommentPost on FIELD_DEFINITION

directive @hook_updateComment on ARGUMENT_DEFINITION

directive @hook_updateCommentPost on FIELD_DEFINITION

directive @hook_getLabel on ARGUMENT_DEFINITION

directive @hook_queryLabel on ARGUMENT_DEFINITION

directive @hook_addLabel on ARGUMENT_DEFINITION

directive @hook_addLabelPost on FIELD_DEFINITION

directive @hook_updateLabel on ARGUMENT_DEFINITION

directive @hook_updateLabelPost on FIELD_DEFINITION

directive @hook_getContract on ARGUMENT_DEFINITION

directive @hook_queryContract on ARGUMENT_DEFINITION

directive @hook_addContract on ARGUMENT_DEFINITION

directive @hook_addContractPost on FIELD_DEFINITION

directive @hook_updateContract on ARGUMENT_DEFINITION

directive @hook_updateContractPost on FIELD_DEFINITION

type Node @hidePrivate {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime! @search
  updatedAt: DateTime
  name: String! @search(by: [term])
  nameid: String! @search(by: [hash, regexp]) @id
  rootnameid: String! @search(by: [hash, regexp])
  parent(filter: NodeFilter): Node
  children(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!] @hasInverse(field: parent)
  type_: NodeType! @search
  tensions_out(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!] @hasInverse(field: emitter)
  tensions_in(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!] @hasInverse(field: receiver)
  about: String @search(by: [fulltext])
  mandate(filter: MandateFilter): Mandate
  docs(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  source(filter: BlobFilter): Blob
  n_tensions_out: Int @count(f: tensions_out)
  n_tensions_in: Int @count(f: tensions_in)
  n_children: Int @count(f: children)
  stats: NodeStats @meta_getNodeStats
  isRoot: Boolean! @search
  isPersonal: Boolean @search
  isPrivate: Boolean! @search
  isArchived: Boolean! @search
  charac(filter: NodeCharacFilter): NodeCharac!
  labels(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label!]
  first_link(filter: UserFilter): User
  second_link(filter: UserFilter): User
  skills: [String!] @search(by: [term])
  role_type: RoleType @search
  contracts(filter: VoteFilter, first: Int, offset: Int): [Vote!] @hasInverse(field: node)
  shared: SharedNode
}

type SharedNode {
  n_labels: Int
  n_tensions: Int
  n_closed_tensions: Int
}

type NodeFragment {
  id: ID!
  name: String
  nameid: String
  type_: NodeType
  isPrivate: Boolean
  charac(filter: NodeCharacFilter): NodeCharac
  about: String
  mandate(filter: MandateFilter): Mandate
  children(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment!]
  first_link: String
  second_link: String
  skills: [String!]
  role_type: RoleType
}

type Mandate {
  id: ID!
  purpose: String! @search(by: [fulltext])
  responsabilities: String
  domains: String
  policies: String
}

type NodeCharac {
  id: ID!
  userCanJoin: Boolean! @search
  mode: NodeMode! @search
}

type NodeStats {
  n_member: Int
  n_guest: Int
  n_circle: Int
  n_role: Int
}

type Post {
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime! @search
  updatedAt: DateTime
  message: String @search(by: [fulltext])
}

type Tension @hidePrivate {
  emitterid: String! @search(by: [hash, regexp])
  emitter(filter: NodeFilter): Node!
  receiverid: String! @search(by: [hash, regexp])
  receiver(filter: NodeFilter): Node!
  nth: String @search
  title: String! @search(by: [fulltext])
  type_: TensionType! @search
  status: TensionStatus! @search
  labels(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label!]
  assignees(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User!]
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment!]
  action: TensionAction
  blobs(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob!] @hasInverse(field: tension)
  contracts(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int): [Contract!] @hasInverse(field: tension)
  history(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event!]! @hasInverse(field: tension)
  n_comments: Int @count(f: comments)
  n_blobs: Int @count(f: blobs)
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime! @search
  updatedAt: DateTime
  message: String @search(by: [fulltext])
}

type Label {
  id: ID!
  rootnameid: String! @search(by: [hash])
  name: String! @search(by: [hash, term])
  description: String
  color: String
  tensions(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!] @hasInverse(field: labels)
  nodes(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!] @hasInverse(field: labels)
  n_nodes: Int @count(f: nodes)
  n_tensions: Int @count(f: tensions)
}

type Comment {
  message: String! @search(by: [fulltext])
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime! @search
  updatedAt: DateTime
}

type Blob {
  tension(filter: TensionFilter): Tension!
  blob_type: BlobType! @search
  pushedFlag: DateTime @search
  archivedFlag: DateTime @search
  node(filter: NodeFragmentFilter): NodeFragment
  md: String
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime! @search
  updatedAt: DateTime
  message: String @search(by: [fulltext])
}

type Event {
  tension(filter: TensionFilter): Tension!
  event_type: TensionEvent! @search
  old: String
  new: String
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime! @search
  updatedAt: DateTime
  message: String @search(by: [fulltext])
}

type EventFragment {
  event_type: TensionEvent! @search
  old: String
  new: String
}

type Contract @hidePrivate {
  event(filter: EventFragmentFilter): EventFragment!
  closedAt: DateTime @search
  tension(filter: TensionFilter): Tension!
  status: ContractStatus! @search
  contract_type: ContractType! @search
  candidates(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User!] @hasInverse(field: contracts)
  participants(filter: VoteFilter, first: Int, offset: Int): [Vote!] @hasInverse(field: contract)
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment!]
  id: ID!
  createdBy(filter: UserFilter): User!
  createdAt: DateTime! @search
  updatedAt: DateTime
  message: String @search(by: [fulltext])
}

type Vote {
  id: ID!
  contract(filter: ContractFilter): Contract!
  node(filter: NodeFilter): Node!
  data: [Int!]
}

type User {
  id: ID!
  createdAt: DateTime!
  lastAck: DateTime!
  username: String! @id
  name: String
  password: String! @hidden
  email: String! @search(by: [hash]) @hidden
  emailHash: String @hidden
  emailValidated: Boolean! @hidden
  rights: UserRights!
  roles(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!] @hasInverse(field: first_link)
  backed_roles(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!] @hasInverse(field: second_link)
  tensions_created(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!] @hasInverse(field: createdBy)
  tensions_assigned(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!] @hasInverse(field: assignees)
  contracts(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int): [Contract!] @hasInverse(field: candidates)
  bio: String
  utc: String
}

type UserRights {
  canLogin: Boolean!
  canCreateRoot: Boolean!
  maxPublicOrga: Int!
}

enum NodeType {
  Circle
  Role
}

enum RoleType {


  Owner

  Member

  Guest

  Retired

  Pending


  Coordinator

  Peer

  Bot

}

enum NodeMode {
  Coordinated

  Agile

}

enum TensionStatus {
  Open
  Closed
}

enum TensionType {
  Operational
  Governance
  Help


}

enum TensionAction {

  NewRole
  NewCircle
  NewMd

  EditRole
  EditCircle
  EditMd

  ArchivedRole
  ArchivedCircle
  ArchivedMd




}

enum TensionEvent {

  Created
  Reopened
  Closed
  TitleUpdated
  CommentPushed
  AssigneeAdded
  AssigneeRemoved
  LabelAdded
  LabelRemoved
  BlobCreated
  BlobCommitted

  BlobPushed
  BlobArchived
  BlobUnarchived
  UserJoin
  UserLeft
  Moved
}

enum BlobType {

  OnNode
  OnAbout
  OnMandate
  OnFirstLink

  OnDoc

}

enum ContractStatus {
  Open
  Closed
  Canceled
}

enum ContractType {
  AnyCoordoDual
  AnyParticipants

  AnyCoordoSource
  AnyCoordoTarget
}

directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION

directive @secret(field: String!, pred: String) on OBJECT|INTERFACE

directive @auth(query: AuthRule, add: AuthRule, update: AuthRule, delete: AuthRule) on OBJECT

directive @remote on OBJECT|INTERFACE

directive @hasInverse(field: String!) on FIELD_DEFINITION

directive @withSubscription on OBJECT|INTERFACE

directive @custom(http: CustomHTTP) on FIELD_DEFINITION

directive @cascade on FIELD

directive @dgraph(type: String, pred: String) on OBJECT|INTERFACE|FIELD_DEFINITION

directive @id on FIELD_DEFINITION

input AddBlobInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  tension: TensionRef!
  blob_type: BlobType!
  pushedFlag: DateTime @alter_RO
  archivedFlag: DateTime @alter_RO
  node: NodeFragmentRef
  md: String
}

type AddBlobPayload {
  blob(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  numUids: Int
}

input AddCommentInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  _VOID: String
}

type AddCommentPayload {
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  numUids: Int
}

input AddContractInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  event: EventFragmentRef!
  closedAt: DateTime
  tension: TensionRef!
  status: ContractStatus!
  contract_type: ContractType!
  candidates: [UserRef!]
  participants: [VoteRef!]
  comments: [CommentRef!]
}

type AddContractPayload {
  contract(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int): [Contract]
  numUids: Int
}

input AddEventFragmentInput {
  event_type: TensionEvent!
  old: String
  new: String
}

type AddEventFragmentPayload {
  eventFragment(filter: EventFragmentFilter, order: EventFragmentOrder, first: Int, offset: Int): [EventFragment]
  numUids: Int
}

input AddEventInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  tension: TensionRef!
  event_type: TensionEvent!
  old: String
  new: String
}

type AddEventPayload {
  event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  numUids: Int
}

input AddLabelInput {
  rootnameid: String!
  name: String! @alter_toLower(f:"name") @alter_unique(f:"name", s:"rootnameid") @alter_minLength(f:"name", n:1)
  description: String @alter_maxLength(f:"description", n:280)
  color: String
  tensions: [TensionRef!] @alter_RO
  nodes: [NodeRef!]
  n_nodes: Int
  n_tensions: Int
}

type AddLabelPayload {
  label(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  numUids: Int
}

input AddMandateInput {
  purpose: String!
  responsabilities: String
  domains: String
  policies: String
}

type AddMandatePayload {
  mandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  numUids: Int
}

input AddNodeCharacInput {
  userCanJoin: Boolean!
  mode: NodeMode!
}

type AddNodeCharacPayload {
  nodeCharac(filter: NodeCharacFilter, first: Int, offset: Int): [NodeCharac]
  numUids: Int
}

input AddNodeFragmentInput {
  name: String @alter_minLength(f:"name", n:1)
  nameid: String @alter_toLower(f:"nameid")
  type_: NodeType
  isPrivate: Boolean
  charac: NodeCharacRef
  about: String @alter_maxLength(f:"about", n:280)
  mandate: MandateRef
  children: [NodeFragmentRef!]
  first_link: String
  second_link: String
  skills: [String!]
  role_type: RoleType
}

type AddNodeFragmentPayload {
  nodeFragment(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment]
  numUids: Int
}

input AddNodeInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime @alter_RO
  name: String!
  nameid: String!
  rootnameid: String!
  parent: NodeRef
  children: [NodeRef!]
  type_: NodeType!
  tensions_out: [TensionRef!]
  tensions_in: [TensionRef!]
  about: String
  mandate: MandateRef
  docs: [BlobRef]
  source: BlobRef
  n_tensions_out: Int
  n_tensions_in: Int
  n_children: Int
  stats: NodeStatsRef
  isRoot: Boolean!
  isPersonal: Boolean
  isPrivate: Boolean!
  isArchived: Boolean!
  charac: NodeCharacRef!
  labels: [LabelRef!]
  first_link: UserRef
  second_link: UserRef
  skills: [String!]
  role_type: RoleType
  contracts: [VoteRef!]
  shared: SharedNodeRef @alter_RO
}

type AddNodePayload {
  node(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  numUids: Int
}

input AddNodeStatsInput {
  n_member: Int
  n_guest: Int
  n_circle: Int
  n_role: Int
}

type AddNodeStatsPayload {
  nodeStats(order: NodeStatsOrder, first: Int, offset: Int): [NodeStats]
  numUids: Int
}

input AddSharedNodeInput {
  n_labels: Int
  n_tensions: Int
  n_closed_tensions: Int
}

type AddSharedNodePayload {
  sharedNode(order: SharedNodeOrder, first: Int, offset: Int): [SharedNode]
  numUids: Int
}

input AddTensionInput {
  createdBy: UserRef!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  emitterid: String!
  emitter: NodeRef!
  receiverid: String!
  receiver: NodeRef!
  nth: String
  title: String! @alter_hasRole(n:["emitter","receiver"], u:"createdBy", a:1) @alter_minLength(f:"title", n:1)
  type_: TensionType! @alter_hasRole(n:["emitter","receiver"], u:"createdBy", a:1)
  status: TensionStatus! @alter_hasRole(n:["emitter","receiver"], u:"createdBy", a:1)
  labels: [LabelRef!]
  assignees: [UserRef!] @alter_hasRole(n:["receiver"], a:1)
  comments: [CommentRef!] @alter_hasRoot(n:["emitter","receiver"])
  action: TensionAction @alter_hasRoot(n:["emitter","receiver"])
  blobs: [BlobRef!] @alter_hasRoot(n:["emitter","receiver"])
  contracts: [ContractRef!] @alter_hasRole(n:["receiver"], a:1)
  history: [EventRef!]! @alter_hasRoot(n:["emitter","receiver"])
  n_comments: Int
  n_blobs: Int
}

type AddTensionPayload {
  tension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  numUids: Int
}

input AddUserInput {
  createdAt: DateTime! @alter_RO
  lastAck: DateTime! @alter_RO
  username: String! @alter_toLower(f:"username")
  name: String
  password: String!
  email: String!
  emailHash: String @alter_RO
  emailValidated: Boolean! @alter_RO
  rights: UserRightsRef! @alter_RO
  roles: [NodeRef!] @alter_RO
  backed_roles: [NodeRef!] @alter_RO
  tensions_created: [TensionRef!] @alter_RO
  tensions_assigned: [TensionRef!] @alter_RO
  contracts: [ContractRef!] @alter_RO
  bio: String
  utc: String
}

type AddUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input AddUserRightsInput {
  canLogin: Boolean!
  canCreateRoot: Boolean!
  maxPublicOrga: Int!
}

type AddUserRightsPayload {
  userRights(order: UserRightsOrder, first: Int, offset: Int): [UserRights]
  numUids: Int
}

input AddVoteInput {
  contract: ContractRef!
  node: NodeRef!
  data: [Int!]
}

type AddVotePayload {
  vote(filter: VoteFilter, first: Int, offset: Int): [Vote]
  numUids: Int
}

input AuthRule {
  and: [AuthRule]
  or: [AuthRule]
  not: AuthRule
  rule: String
}

input BlobFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  blob_type: BlobType_hash
  pushedFlag: DateTimeFilter
  archivedFlag: DateTimeFilter
  and: BlobFilter
  or: BlobFilter
  not: BlobFilter
}

input BlobOrder {
  asc: BlobOrderable
  desc: BlobOrderable
  then: BlobOrder
}

enum BlobOrderable {
  createdAt
  updatedAt
  message
  pushedFlag
  archivedFlag
  md
}

input BlobPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension: TensionRef
  blob_type: BlobType @patch_RO
  pushedFlag: DateTime @alter_RO
  archivedFlag: DateTime @alter_RO
  node: NodeFragmentRef @patch_RO
  md: String @patch_RO
}

input BlobRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension: TensionRef
  blob_type: BlobType
  pushedFlag: DateTime
  archivedFlag: DateTime
  node: NodeFragmentRef
  md: String
}

input BlobType_hash {
  eq: BlobType!
}

input CommentFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  and: CommentFilter
  or: CommentFilter
  not: CommentFilter
}

input CommentOrder {
  asc: CommentOrderable
  desc: CommentOrderable
  then: CommentOrder
}

enum CommentOrderable {
  createdAt
  updatedAt
  message
  _VOID
}

input CommentPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String @patch_isOwner(u:"createdBy")
  _VOID: String
}

input CommentRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  _VOID: String
}

input ContractFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  closedAt: DateTimeFilter
  status: ContractStatus_hash
  contract_type: ContractType_hash
  and: ContractFilter
  or: ContractFilter
  not: ContractFilter
}

input ContractOrder {
  asc: ContractOrderable
  desc: ContractOrderable
  then: ContractOrder
}

enum ContractOrderable {
  createdAt
  updatedAt
  message
  closedAt
}

input ContractPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  event: EventFragmentRef @patch_RO
  closedAt: DateTime @patch_RO
  tension: TensionRef @patch_RO
  status: ContractStatus @patch_RO
  contract_type: ContractType @patch_RO
  candidates: [UserRef!] @patch_RO
  participants: [VoteRef!]
  comments: [CommentRef!]
}

input ContractRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  event: EventFragmentRef
  closedAt: DateTime
  tension: TensionRef
  status: ContractStatus
  contract_type: ContractType
  candidates: [UserRef!]
  participants: [VoteRef!]
  comments: [CommentRef!]
}

input ContractStatus_hash {
  eq: ContractStatus!
}

input ContractType_hash {
  eq: ContractType!
}

input CustomHTTP {
  url: String!
  method: HTTPMethod!
  body: String
  graphql: String
  mode: Mode
  forwardHeaders: [String!]
  secretHeaders: [String!]
  introspectionHeaders: [String!]
  skipIntrospection: Boolean
}

scalar DateTime

input DateTimeFilter {
  eq: DateTime
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
}

type DeleteBlobPayload {
  blob(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  msg: String
  numUids: Int
}

type DeleteCommentPayload {
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  msg: String
  numUids: Int
}

type DeleteContractPayload {
  contract(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int): [Contract]
  msg: String
  numUids: Int
}

type DeleteEventFragmentPayload {
  eventFragment(filter: EventFragmentFilter, order: EventFragmentOrder, first: Int, offset: Int): [EventFragment]
  msg: String
  numUids: Int
}

type DeleteEventPayload {
  event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  msg: String
  numUids: Int
}

type DeleteLabelPayload {
  label(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  msg: String
  numUids: Int
}

type DeleteMandatePayload {
  mandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  msg: String
  numUids: Int
}

type DeleteNodeCharacPayload {
  nodeCharac(filter: NodeCharacFilter, first: Int, offset: Int): [NodeCharac]
  msg: String
  numUids: Int
}

type DeleteNodeFragmentPayload {
  nodeFragment(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment]
  msg: String
  numUids: Int
}

type DeleteNodePayload {
  node(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  msg: String
  numUids: Int
}

type DeletePostPayload {
  post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
  msg: String
  numUids: Int
}

type DeleteTensionPayload {
  tension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  msg: String
  numUids: Int
}

type DeleteUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  msg: String
  numUids: Int
}

type DeleteVotePayload {
  vote(filter: VoteFilter, first: Int, offset: Int): [Vote]
  msg: String
  numUids: Int
}

enum DgraphIndex {
  int
  float
  bool
  hash
  exact
  term
  fulltext
  trigram
  regexp
  year
  month
  day
  hour
}

input EventFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  event_type: TensionEvent_hash
  and: EventFilter
  or: EventFilter
  not: EventFilter
}

input EventFragmentFilter {
  event_type: TensionEvent_hash
  and: EventFragmentFilter
  or: EventFragmentFilter
  not: EventFragmentFilter
}

input EventFragmentOrder {
  asc: EventFragmentOrderable
  desc: EventFragmentOrderable
  then: EventFragmentOrder
}

enum EventFragmentOrderable {
  old
  new
}

input EventFragmentPatch {
  event_type: TensionEvent
  old: String
  new: String
}

input EventFragmentRef {
  event_type: TensionEvent
  old: String
  new: String
}

input EventOrder {
  asc: EventOrderable
  desc: EventOrderable
  then: EventOrder
}

enum EventOrderable {
  createdAt
  updatedAt
  message
  old
  new
}

input EventPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension: TensionRef
  event_type: TensionEvent
  old: String
  new: String
}

input EventRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  tension: TensionRef
  event_type: TensionEvent
  old: String
  new: String
}

input FloatFilter {
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
}

enum HTTPMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

input IntFilter {
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
}

input LabelFilter {
  id: [ID!]
  rootnameid: StringHashFilter
  name: StringHashFilter_StringTermFilter
  and: LabelFilter
  or: LabelFilter
  not: LabelFilter
}

input LabelOrder {
  asc: LabelOrderable
  desc: LabelOrderable
  then: LabelOrder
}

enum LabelOrderable {
  rootnameid
  name
  description
  color
  n_nodes
  n_tensions
}

input LabelPatch {
  rootnameid: String @patch_RO
  name: String @alter_toLower(f:"name") @alter_unique(f:"name", s:"rootnameid") @alter_minLength(f:"name", n:1)
  description: String @alter_maxLength(f:"description", n:280)
  color: String
  tensions: [TensionRef!] @alter_RO
  nodes: [NodeRef!]
  n_nodes: Int
  n_tensions: Int
}

input LabelRef {
  id: ID
  rootnameid: String
  name: String
  description: String
  color: String
  tensions: [TensionRef!]
  nodes: [NodeRef!]
  n_nodes: Int
  n_tensions: Int
}

input MandateFilter {
  id: [ID!]
  purpose: StringFullTextFilter
  and: MandateFilter
  or: MandateFilter
  not: MandateFilter
}

input MandateOrder {
  asc: MandateOrderable
  desc: MandateOrderable
  then: MandateOrder
}

enum MandateOrderable {
  purpose
  responsabilities
  domains
  policies
}

input MandatePatch {
  purpose: String @patch_RO
  responsabilities: String @patch_RO
  domains: String @patch_RO
  policies: String @patch_RO
}

input MandateRef {
  id: ID
  purpose: String
  responsabilities: String
  domains: String
  policies: String
}

enum Mode {
  BATCH
  SINGLE
}

type Mutation {
  addNode(input: [AddNodeInput!]! @hook_addNode): AddNodePayload @hook_addNodePost
  updateNode(input: UpdateNodeInput! @hook_updateNode): UpdateNodePayload @hook_updateNodePost
  deleteNode(filter: NodeFilter!): DeleteNodePayload
  addSharedNode(input: [AddSharedNodeInput!]!): AddSharedNodePayload
  addNodeFragment(input: [AddNodeFragmentInput!]!): AddNodeFragmentPayload
  updateNodeFragment(input: UpdateNodeFragmentInput!): UpdateNodeFragmentPayload
  deleteNodeFragment(filter: NodeFragmentFilter!): DeleteNodeFragmentPayload
  addMandate(input: [AddMandateInput!]!): AddMandatePayload
  updateMandate(input: UpdateMandateInput!): UpdateMandatePayload
  deleteMandate(filter: MandateFilter!): DeleteMandatePayload
  addNodeCharac(input: [AddNodeCharacInput!]!): AddNodeCharacPayload
  updateNodeCharac(input: UpdateNodeCharacInput!): UpdateNodeCharacPayload
  deleteNodeCharac(filter: NodeCharacFilter!): DeleteNodeCharacPayload
  addNodeStats(input: [AddNodeStatsInput!]!): AddNodeStatsPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  deletePost(filter: PostFilter!): DeletePostPayload
  addTension(input: [AddTensionInput!]! @hook_addTension): AddTensionPayload @hook_addTensionPost
  updateTension(input: UpdateTensionInput! @hook_updateTension): UpdateTensionPayload @hook_updateTensionPost
  deleteTension(filter: TensionFilter!): DeleteTensionPayload
  addLabel(input: [AddLabelInput!]! @hook_addLabel): AddLabelPayload @hook_addLabelPost
  updateLabel(input: UpdateLabelInput! @hook_updateLabel): UpdateLabelPayload @hook_updateLabelPost
  deleteLabel(filter: LabelFilter!): DeleteLabelPayload
  addComment(input: [AddCommentInput!]! @hook_addComment): AddCommentPayload @hook_addCommentPost
  updateComment(input: UpdateCommentInput! @hook_updateComment): UpdateCommentPayload @hook_updateCommentPost
  deleteComment(filter: CommentFilter!): DeleteCommentPayload
  addBlob(input: [AddBlobInput!]!): AddBlobPayload
  updateBlob(input: UpdateBlobInput!): UpdateBlobPayload
  deleteBlob(filter: BlobFilter!): DeleteBlobPayload
  addEvent(input: [AddEventInput!]!): AddEventPayload
  updateEvent(input: UpdateEventInput!): UpdateEventPayload
  deleteEvent(filter: EventFilter!): DeleteEventPayload
  addEventFragment(input: [AddEventFragmentInput!]!): AddEventFragmentPayload
  updateEventFragment(input: UpdateEventFragmentInput!): UpdateEventFragmentPayload
  deleteEventFragment(filter: EventFragmentFilter!): DeleteEventFragmentPayload
  addContract(input: [AddContractInput!]! @hook_addContract): AddContractPayload @hook_addContractPost
  updateContract(input: UpdateContractInput! @hook_updateContract): UpdateContractPayload @hook_updateContractPost
  deleteContract(filter: ContractFilter!): DeleteContractPayload
  addVote(input: [AddVoteInput!]!): AddVotePayload
  updateVote(input: UpdateVoteInput!): UpdateVotePayload
  deleteVote(filter: VoteFilter!): DeleteVotePayload
  addUser(input: [AddUserInput!]!): AddUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  deleteUser(filter: UserFilter!): DeleteUserPayload
  addUserRights(input: [AddUserRightsInput!]!): AddUserRightsPayload
}

input NodeCharacFilter {
  id: [ID!]
  userCanJoin: Boolean
  mode: NodeMode_hash
  and: NodeCharacFilter
  or: NodeCharacFilter
  not: NodeCharacFilter
}

input NodeCharacPatch {
  userCanJoin: Boolean
  mode: NodeMode
}

input NodeCharacRef {
  id: ID
  userCanJoin: Boolean
  mode: NodeMode
}

input NodeFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  name: StringTermFilter
  nameid: StringHashFilter_StringRegExpFilter
  rootnameid: StringHashFilter_StringRegExpFilter
  type_: NodeType_hash
  about: StringFullTextFilter
  isRoot: Boolean
  isPersonal: Boolean
  isPrivate: Boolean
  isArchived: Boolean
  skills: StringTermFilter
  role_type: RoleType_hash
  and: NodeFilter
  or: NodeFilter
  not: NodeFilter
}

input NodeFragmentFilter {
  id: [ID!]
  not: NodeFragmentFilter
}

input NodeFragmentOrder {
  asc: NodeFragmentOrderable
  desc: NodeFragmentOrderable
  then: NodeFragmentOrder
}

enum NodeFragmentOrderable {
  name
  nameid
  about
  first_link
  second_link
}

input NodeFragmentPatch {
  name: String @alter_minLength(f:"name", n:1)
  nameid: String @alter_toLower(f:"nameid")
  type_: NodeType
  isPrivate: Boolean
  charac: NodeCharacRef
  about: String @alter_maxLength(f:"about", n:280)
  mandate: MandateRef
  children: [NodeFragmentRef!]
  first_link: String
  second_link: String
  skills: [String!]
  role_type: RoleType
}

input NodeFragmentRef {
  id: ID
  name: String
  nameid: String
  type_: NodeType
  isPrivate: Boolean
  charac: NodeCharacRef
  about: String
  mandate: MandateRef
  children: [NodeFragmentRef!]
  first_link: String
  second_link: String
  skills: [String!]
  role_type: RoleType
}

input NodeMode_hash {
  eq: NodeMode!
}

input NodeOrder {
  asc: NodeOrderable
  desc: NodeOrderable
  then: NodeOrder
}

enum NodeOrderable {
  createdAt
  updatedAt
  name
  nameid
  rootnameid
  about
  n_tensions_out
  n_tensions_in
  n_children
}

input NodePatch {
  createdBy: UserRef @patch_RO
  createdAt: DateTime @patch_RO
  updatedAt: DateTime @alter_RO
  name: String @patch_RO
  rootnameid: String @patch_RO
  parent: NodeRef @patch_RO
  children: [NodeRef!] @patch_RO
  type_: NodeType @patch_RO
  tensions_out: [TensionRef!] @patch_RO
  tensions_in: [TensionRef!] @patch_RO
  about: String @patch_RO
  mandate: MandateRef @patch_RO
  docs: [BlobRef] @patch_RO
  source: BlobRef @patch_RO
  n_tensions_out: Int
  n_tensions_in: Int
  n_children: Int
  stats: NodeStatsRef
  isRoot: Boolean @patch_RO
  isPersonal: Boolean @patch_RO
  isPrivate: Boolean @patch_RO
  isArchived: Boolean @patch_RO
  charac: NodeCharacRef @patch_RO
  labels: [LabelRef!] @patch_RO
  first_link: UserRef @patch_RO
  second_link: UserRef @patch_RO
  skills: [String!] @patch_RO
  role_type: RoleType @patch_RO
  contracts: [VoteRef!]
  shared: SharedNodeRef @alter_RO
}

input NodeRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  nameid: String
  rootnameid: String
  parent: NodeRef
  children: [NodeRef!]
  type_: NodeType
  tensions_out: [TensionRef!]
  tensions_in: [TensionRef!]
  about: String
  mandate: MandateRef
  docs: [BlobRef]
  source: BlobRef
  n_tensions_out: Int
  n_tensions_in: Int
  n_children: Int
  stats: NodeStatsRef
  isRoot: Boolean
  isPersonal: Boolean
  isPrivate: Boolean
  isArchived: Boolean
  charac: NodeCharacRef
  labels: [LabelRef!]
  first_link: UserRef
  second_link: UserRef
  skills: [String!]
  role_type: RoleType
  contracts: [VoteRef!]
  shared: SharedNodeRef
}

input NodeStatsOrder {
  asc: NodeStatsOrderable
  desc: NodeStatsOrderable
  then: NodeStatsOrder
}

enum NodeStatsOrderable {
  n_member
  n_guest
  n_circle
  n_role
}

input NodeStatsRef {
  n_member: Int
  n_guest: Int
  n_circle: Int
  n_role: Int
}

input NodeType_hash {
  eq: NodeType!
}

input PostFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  and: PostFilter
  or: PostFilter
  not: PostFilter
}

input PostOrder {
  asc: PostOrderable
  desc: PostOrderable
  then: PostOrder
}

enum PostOrderable {
  createdAt
  updatedAt
  message
}

input PostPatch {
  createdBy: UserRef @patch_RO
  createdAt: DateTime @patch_RO
  updatedAt: DateTime @patch_isOwner(u:"createdBy")
  message: String @patch_isOwner(u:"createdBy")
}

input PostRef {
  id: ID!
}

type Query {
  getNode(id: ID, nameid: String @hook_getNode): Node
  queryNode(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int @hook_queryNode): [Node]
  querySharedNode(order: SharedNodeOrder, first: Int, offset: Int): [SharedNode]
  getNodeFragment(id: ID!): NodeFragment
  queryNodeFragment(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment]
  getMandate(id: ID!): Mandate
  queryMandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  getNodeCharac(id: ID!): NodeCharac
  queryNodeCharac(filter: NodeCharacFilter, first: Int, offset: Int): [NodeCharac]
  queryNodeStats(order: NodeStatsOrder, first: Int, offset: Int): [NodeStats]
  getPost(id: ID!): Post
  queryPost(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
  getTension(id: ID! @hook_getTension): Tension
  queryTension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int @hook_queryTension): [Tension]
  getLabel(id: ID! @hook_getLabel): Label
  queryLabel(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int @hook_queryLabel): [Label]
  getComment(id: ID! @hook_getComment): Comment
  queryComment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int @hook_queryComment): [Comment]
  getBlob(id: ID!): Blob
  queryBlob(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  getEvent(id: ID!): Event
  queryEvent(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  queryEventFragment(filter: EventFragmentFilter, order: EventFragmentOrder, first: Int, offset: Int): [EventFragment]
  getContract(id: ID! @hook_getContract): Contract
  queryContract(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int @hook_queryContract): [Contract]
  getVote(id: ID!): Vote
  queryVote(filter: VoteFilter, first: Int, offset: Int): [Vote]
  getUser(id: ID, username: String): User
  queryUser(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  queryUserRights(order: UserRightsOrder, first: Int, offset: Int): [UserRights]
}

input RoleType_hash {
  eq: RoleType
}

input SharedNodeOrder {
  asc: SharedNodeOrderable
  desc: SharedNodeOrderable
  then: SharedNodeOrder
}

enum SharedNodeOrderable {
  n_labels
  n_tensions
  n_closed_tensions
}

input SharedNodeRef {
  n_labels: Int
  n_tensions: Int
  n_closed_tensions: Int
}

input StringExactFilter {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
}

input StringFullTextFilter {
  alloftext: String
  anyoftext: String
}

input StringHashFilter {
  eq: String
}

input StringHashFilter_StringRegExpFilter {
  eq: String
  regexp: String
}

input StringHashFilter_StringTermFilter {
  eq: String
  allofterms: String
  anyofterms: String
}

input StringRegExpFilter {
  regexp: String
}

input StringTermFilter {
  allofterms: String
  anyofterms: String
}

input TensionEvent_hash {
  eq: TensionEvent!
}

input TensionFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  emitterid: StringHashFilter_StringRegExpFilter
  receiverid: StringHashFilter_StringRegExpFilter
  nth: StringTermFilter
  title: StringFullTextFilter
  type_: TensionType_hash
  status: TensionStatus_hash
  and: TensionFilter
  or: TensionFilter
  not: TensionFilter
}

input TensionOrder {
  asc: TensionOrderable
  desc: TensionOrderable
  then: TensionOrder
}

enum TensionOrderable {
  createdAt
  updatedAt
  message
  emitterid
  receiverid
  nth
  title
  n_comments
  n_blobs
}

input TensionPatch {
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  emitterid: String @patch_RO
  emitter: NodeRef @patch_RO
  receiverid: String @patch_RO
  receiver: NodeRef @patch_RO
  nth: String
  title: String @alter_hasRole(n:["emitter","receiver"], u:"createdBy", a:1) @alter_minLength(f:"title", n:1)
  type_: TensionType @alter_hasRole(n:["emitter","receiver"], u:"createdBy", a:1)
  status: TensionStatus @alter_hasRole(n:["emitter","receiver"], u:"createdBy", a:1)
  labels: [LabelRef!] @patch_hasRole(n:["emitter","receiver"], u:"createdBy", a:1)
  assignees: [UserRef!] @alter_hasRole(n:["receiver"], a:1)
  comments: [CommentRef!] @alter_hasRoot(n:["emitter","receiver"])
  action: TensionAction @alter_hasRoot(n:["emitter","receiver"])
  blobs: [BlobRef!] @alter_hasRoot(n:["emitter","receiver"])
  contracts: [ContractRef!] @alter_hasRole(n:["receiver"], a:1)
  history: [EventRef!] @alter_hasRoot(n:["emitter","receiver"])
  n_comments: Int
  n_blobs: Int
}

input TensionRef {
  id: ID
  createdBy: UserRef
  createdAt: DateTime
  updatedAt: DateTime
  message: String
  emitterid: String
  emitter: NodeRef
  receiverid: String
  receiver: NodeRef
  nth: String
  title: String
  type_: TensionType
  status: TensionStatus
  labels: [LabelRef!]
  assignees: [UserRef!]
  comments: [CommentRef!]
  action: TensionAction
  blobs: [BlobRef!]
  contracts: [ContractRef!]
  history: [EventRef!]
  n_comments: Int
  n_blobs: Int
}

input TensionStatus_hash {
  eq: TensionStatus!
}

input TensionType_hash {
  eq: TensionType!
}

input UpdateBlobInput {
  filter: BlobFilter!
  set: BlobPatch
  remove: BlobPatch
}

type UpdateBlobPayload {
  blob(filter: BlobFilter, order: BlobOrder, first: Int, offset: Int): [Blob]
  numUids: Int
}

input UpdateCommentInput {
  filter: CommentFilter!
  set: CommentPatch
  remove: CommentPatch
}

type UpdateCommentPayload {
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  numUids: Int
}

input UpdateContractInput {
  filter: ContractFilter!
  set: ContractPatch
  remove: ContractPatch
}

type UpdateContractPayload {
  contract(filter: ContractFilter, order: ContractOrder, first: Int, offset: Int): [Contract]
  numUids: Int
}

input UpdateEventFragmentInput {
  filter: EventFragmentFilter!
  set: EventFragmentPatch
  remove: EventFragmentPatch
}

type UpdateEventFragmentPayload {
  eventFragment(filter: EventFragmentFilter, order: EventFragmentOrder, first: Int, offset: Int): [EventFragment]
  numUids: Int
}

input UpdateEventInput {
  filter: EventFilter!
  set: EventPatch
  remove: EventPatch
}

type UpdateEventPayload {
  event(filter: EventFilter, order: EventOrder, first: Int, offset: Int): [Event]
  numUids: Int
}

input UpdateLabelInput {
  filter: LabelFilter!
  set: LabelPatch
  remove: LabelPatch
}

type UpdateLabelPayload {
  label(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  numUids: Int
}

input UpdateMandateInput {
  filter: MandateFilter!
  set: MandatePatch
  remove: MandatePatch
}

type UpdateMandatePayload {
  mandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  numUids: Int
}

input UpdateNodeCharacInput {
  filter: NodeCharacFilter!
  set: NodeCharacPatch
  remove: NodeCharacPatch
}

type UpdateNodeCharacPayload {
  nodeCharac(filter: NodeCharacFilter, first: Int, offset: Int): [NodeCharac]
  numUids: Int
}

input UpdateNodeFragmentInput {
  filter: NodeFragmentFilter!
  set: NodeFragmentPatch
  remove: NodeFragmentPatch
}

type UpdateNodeFragmentPayload {
  nodeFragment(filter: NodeFragmentFilter, order: NodeFragmentOrder, first: Int, offset: Int): [NodeFragment]
  numUids: Int
}

input UpdateNodeInput {
  filter: NodeFilter!
  set: NodePatch
  remove: NodePatch
}

type UpdateNodePayload {
  node(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  numUids: Int
}

input UpdatePostInput {
  filter: PostFilter!
  set: PostPatch
  remove: PostPatch
}

type UpdatePostPayload {
  post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
  numUids: Int
}

input UpdateTensionInput {
  filter: TensionFilter!
  set: TensionPatch
  remove: TensionPatch
}

type UpdateTensionPayload {
  tension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  numUids: Int
}

input UpdateUserInput {
  filter: UserFilter!
  set: UserPatch
  remove: UserPatch
}

type UpdateUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input UpdateVoteInput {
  filter: VoteFilter!
  set: VotePatch
  remove: VotePatch
}

type UpdateVotePayload {
  vote(filter: VoteFilter, first: Int, offset: Int): [Vote]
  numUids: Int
}

input UserFilter {
  id: [ID!]
  username: StringHashFilter
  email: StringHashFilter
  and: UserFilter
  or: UserFilter
  not: UserFilter
}

input UserOrder {
  asc: UserOrderable
  desc: UserOrderable
  then: UserOrder
}

enum UserOrderable {
  createdAt
  lastAck
  username
  name
  password
  email
  emailHash
  bio
  utc
}

input UserPatch {
  createdAt: DateTime @alter_RO
  lastAck: DateTime @alter_RO
  name: String @patch_isOwner
  password: String @patch_isOwner
  email: String @patch_isOwner
  emailHash: String @alter_RO
  emailValidated: Boolean @alter_RO
  rights: UserRightsRef @alter_RO
  roles: [NodeRef!] @alter_RO
  backed_roles: [NodeRef!] @alter_RO
  tensions_created: [TensionRef!] @alter_RO
  tensions_assigned: [TensionRef!] @alter_RO
  contracts: [ContractRef!] @alter_RO
  bio: String @patch_isOwner
  utc: String @patch_isOwner
}

input UserRef {
  id: ID
  createdAt: DateTime
  lastAck: DateTime
  username: String
  name: String
  password: String
  email: String
  emailHash: String
  emailValidated: Boolean
  rights: UserRightsRef
  roles: [NodeRef!]
  backed_roles: [NodeRef!]
  tensions_created: [TensionRef!]
  tensions_assigned: [TensionRef!]
  contracts: [ContractRef!]
  bio: String
  utc: String
}

input UserRightsOrder {
  asc: UserRightsOrderable
  desc: UserRightsOrderable
  then: UserRightsOrder
}

enum UserRightsOrderable {
  maxPublicOrga
}

input UserRightsRef {
  canLogin: Boolean
  canCreateRoot: Boolean
  maxPublicOrga: Int
}

input VoteFilter {
  id: [ID!]
  not: VoteFilter
}

input VotePatch {
  contract: ContractRef
  node: NodeRef
  data: [Int!]
}

input VoteRef {
  id: ID
  contract: ContractRef
  node: NodeRef
  data: [Int!]
}
