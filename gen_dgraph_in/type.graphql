


type Node {
  id: ID!
  createdAt: DateTime! @search
  createdBy: User!
  parent: Node
  children: [Node!] @hasInverse(field: parent)
  type_: NodeType! @search
  nameid: String! @id
  name: String! @search(by: [term])
  rootnameid: String! @search(by: [hash])
  mandate: Mandate
  tensions_out: [Tension!] @hasInverse(field: emitter)
  tensions_in: [Tension!] @hasInverse(field: receiver)
  n_tensions_out: Int 
  n_tensions_in: Int 
  n_children: Int 
  isRoot: Boolean! @search
  first_link: User
  second_link: User
  skills: [String!] @search(by: [term])
  role_type: RoleType
}

interface Post {
  id: ID!
  createdAt: DateTime! @search
  createdBy: User!
  message: String @search(by: [fulltext])
}

type Tension implements Post {
  nth: String @search
  title: String! @search(by: [term])
  type_: TensionType! @search
  emitter: Node!
  receiver: Node!
  comments: [Comment!]
  labels: [Label!]
  n_comments: Int 
}

type Comment implements Post{
_VOID: String
}

type Mandate implements Post {
  purpose: String! @search(by: [fulltext])
  responsabilities: Post
  domains: Post
}

type User {
  id: ID!
  createdAt: DateTime!
  username: String! @id
  email: String!  @search(by: [hash])
  emailHash: String 
  emailValidated: Boolean! 
  name: String
  password: String! 
  rights: UserRights!
  roles: [Node!] @hasInverse(field: first_link)
  backed_roles: [Node!] @hasInverse(field: second_link)
  bio: String
  utc: String
}

type UserRights {
  canLogin: Boolean!
  canCreateRoot: Boolean!
}

type Label {
  id: ID!
  name: String! @id
  color: String
}

enum NodeType {
  Circle
  Role
}

enum TensionType {
  Governance
  Operational
  Personal
  Help


}

enum RoleType {
  Coordinator
  Member
  Guest


}
