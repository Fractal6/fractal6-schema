


type Node {
  id: ID!
  createdAt: DateTime! @search
  createdBy: User!
  parent: Node
  children: [Node!] @hasInverse(field: parent)
  type_: NodeType! @search
  name: String! @search(by: [term])
  nameid: String! @id
  rootnameid: String! @search(by: [hash])
  mandate: Mandate
  tensions_out: [Tension!] @hasInverse(field: emitter)
  tensions_in: [Tension!] @hasInverse(field: receivers)
  n_tensions_out: Int 
  n_tensions_in: Int 
  n_children: Int 
  isRoot: Boolean! @search
  first_link: User
  second_link: User
  skills: [String!] @search(by: [term])
}

interface Post {
  id: ID!
  createdAt: DateTime! @search
  createdBy: User!
  message: String @search(by: [fulltext])
}

type Tension implements Post {
  title: String! @search(by: [term])
  type_: TensionType! @search
  emitter: Node!
  receivers: [Node!]
  comments: [Comment!]
  labels: [Label!]
  n_comments: Int 
}

type Comment implements Post{
_VOID: String
}

type Mandate implements Post {
  purpose: String! @search(by: [fulltext])
  responsabilities: String
  domains: [String!]
}

type User {
  id: ID!
  createdAt: DateTime! @search
  username: String! @id
  fullname: String
  password: String! 
  roles: [Node!] @hasInverse(field: first_link)
  backed_roles: [Node!] @hasInverse(field: second_link)
  bio: String
}

type Label {
  id: ID!
  name: String! @id @search(by: [hash])
  color: String
}

enum NodeType {
  Circle
  Role
}

enum TensionType {
  Governance
  Operational
  Personal
  Help
  Alert

}
