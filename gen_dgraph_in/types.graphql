


type Node  {
  id: ID!
  createdAt: DateTime! @search
  createdBy: User!
  name: String! @search(by: [term])
  nameid: String! @id @search(by: [hash, regexp])
  rootnameid: String! @search(by: [hash, regexp])
  parent: Node
  children: [Node!] @hasInverse(field: parent)
  type_: NodeType! @search
  tensions_out: [Tension!] @hasInverse(field: emitter)
  tensions_in: [Tension!] @hasInverse(field: receiver)
  about: String @search(by: [fulltext])
  mandate: Mandate
  docs: [Tension]
  source: Tension
  n_tensions_out: Int 
  n_tensions_in: Int 
  n_children: Int 
  stats: NodeStats 
  isRoot: Boolean! @search
  isPrivate: Boolean! @search
  charac: NodeCharac!
  first_link: User
  second_link: User
  skills: [String!] @search(by: [term])
  role_type: RoleType @search
}

type NodeFragment {
  id: ID!
  name: String
  nameid: String
  children: [NodeFragment!]
  type_: NodeType
  about: String
  mandate: Mandate
  isPrivate: Boolean
  charac: NodeCharac
  first_link: String
  second_link: String
  skills: [String!]
  role_type: RoleType
}

type NodeCharac {
  id: ID!
  userCanJoin: Boolean! @search
  mode: NodeMode! @search
}

type NodeStats {
  n_member: Int
  n_guest: Int
  n_circle: Int
  n_role: Int
}

interface Post {
  id: ID!
  createdAt: DateTime! @search
  updatedAt: DateTime
  createdBy: User!
  message: String @search(by: [fulltext])
}

type Tension implements Post {
  nth: String @search
  title: String! @search(by: [fulltext])
  type_: TensionType! @search
  emitter: Node!
  emitterid: String! @search(by: [hash, regexp])
  receiver: Node!
  receiverid: String! @search(by: [hash, regexp])
  status: TensionStatus! @search
  action: TensionAction
  labels: [Label!]
  comments: [Comment!]
  blobs: [Blob!] @hasInverse(field: tension)
  history: [Event!]!
  head: Blob
  n_comments: Int 
}

type Label {
  id: ID!
  name: String! @id
  color: String
}

type Comment implements Post{
_VOID: String
}

type Blob implements Post {
  tension: Tension!
  blob_type: BlobType! @search
  node: NodeFragment
  md: String
}

type Event implements Post {
  event_type: TensionEvent! @search
  old: String!
  new: String!
}

type Mandate {
  id: ID!
  purpose: String! @search(by: [fulltext])
  responsabilities: String
  domains: String
  policies: String
}

type User {
  id: ID!
  createdAt: DateTime!
  username: String! @id
  name: String
  password: String! 
  email: String! @search(by: [hash]) 
  emailHash: String 
  emailValidated: Boolean! 
  rights: UserRights!
  roles: [Node!] @hasInverse(field: first_link)
  backed_roles: [Node!] @hasInverse(field: second_link)
  bio: String
  utc: String
}

type UserRights {
  canLogin: Boolean!
  canCreateRoot: Boolean!
}

enum NodeType {
  Circle
  Role
}

enum RoleType {

  Coordinator
  Peer

  Member

  Guest


}

enum NodeMode {
  Chaos
  Coordinated
}

enum TensionStatus {
  Open
  Closed
}

enum TensionType {
  Governance
  Operational
  Personal
  Help


}

enum TensionAction {

  NewRole
  NewCircle


  EditRole
  EditCircle







}

enum TensionEvent {
  Created
  Reopened
  Closed
  TitleUpdated
  CommentPushed




  BlobCreated
  BlobCommitted
  BlobPushed
}

enum BlobType {
  InitBlob
  OnAbout
  OnMandate
  OnFirstLink
  OnDoc
}
