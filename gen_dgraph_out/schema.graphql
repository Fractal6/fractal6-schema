directive @hasInverse(field: String!) on FIELD_DEFINITION

directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION

directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION

directive @id on FIELD_DEFINITION

directive @secret(field: String!, pred: String) on OBJECT | INTERFACE

input AddCommentInput {
  createdAt: DateTime!
  createdBy: UserRef!
  message: String
  _VOID: String
}

type AddCommentPayload {
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  numUids: Int
}

input AddLabelInput {
  name: String!
  color: String
}

type AddLabelPayload {
  label(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  numUids: Int
}

input AddMandateInput {
  tensions: [TensionRef!]!
  purpose: String!
  responsabilities: String
  domains: String
  policies: String
}

type AddMandatePayload {
  mandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  numUids: Int
}

input AddNodeCharacInput {
  userCanJoin: Boolean!
  mode: NodeMode!
}

type AddNodeCharacPayload {
  nodecharac(first: Int, offset: Int): [NodeCharac]
  numUids: Int
}

input AddNodeInput {
  createdAt: DateTime!
  createdBy: UserRef!
  parent: NodeRef
  children: [NodeRef!]
  type_: NodeType!
  name: String!
  nameid: String!
  rootnameid: String!
  mandate: MandateRef
  tensions_out: [TensionRef!]
  tensions_in: [TensionRef!]
  n_tensions_out: Int
  n_tensions_in: Int
  n_children: Int
  isRoot: Boolean!
  first_link: UserRef
  second_link: UserRef
  skills: [String!]
  role_type: RoleType
  charac: NodeCharacRef!
}

type AddNodePayload {
  node(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  numUids: Int
}

input AddTensionInput {
  createdAt: DateTime!
  createdBy: UserRef!
  message: String
  nth: String
  title: String!
  type_: TensionType!
  emitter: NodeRef!
  receiver: NodeRef!
  comments: [CommentRef!]
  labels: [LabelRef!]
  status: TensionStatus!
  action: TensionAction
  mandate: MandateRef
  n_comments: Int
  emitterid: String!
  receiverid: String!
}

type AddTensionPayload {
  tension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  numUids: Int
}

input AddUserInput {
  createdAt: DateTime!
  username: String!
  emailValidated: Boolean!
  emailHash: String
  email: String!
  name: String
  password: String!
  rights: UserRightsRef!
  roles: [NodeRef!]
  backed_roles: [NodeRef!]
  bio: String
  utc: String
}

type AddUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

input AddUserRightsInput {
  canLogin: Boolean!
  canCreateRoot: Boolean!
}

type AddUserRightsPayload {
  userrights(first: Int, offset: Int): [UserRights]
  numUids: Int
}

type Comment implements Post {
  id: ID!
  createdAt: DateTime!
  createdBy(filter: UserFilter): User!
  message: String
  _VOID: String
}

input CommentFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  and: CommentFilter
  or: CommentFilter
  not: CommentFilter
}

input CommentOrder {
  asc: CommentOrderable
  desc: CommentOrderable
  then: CommentOrder
}

enum CommentOrderable {
  createdAt
  message
  _VOID
}

input CommentPatch {
  createdAt: DateTime
  createdBy: UserRef
  message: String
  _VOID: String
}

input CommentRef {
  id: ID
  createdAt: DateTime
  createdBy: UserRef
  message: String
  _VOID: String
}

scalar DateTime

input DateTimeFilter {
  eq: DateTime
  le: DateTime
  lt: DateTime
  ge: DateTime
  gt: DateTime
}

type DeleteCommentPayload {
  msg: String
  numUids: Int
}

type DeleteLabelPayload {
  msg: String
  numUids: Int
}

type DeleteMandatePayload {
  msg: String
  numUids: Int
}

type DeleteNodePayload {
  msg: String
  numUids: Int
}

type DeletePostPayload {
  msg: String
  numUids: Int
}

type DeleteTensionPayload {
  msg: String
  numUids: Int
}

type DeleteUserPayload {
  msg: String
  numUids: Int
}

enum DgraphIndex {
  int
  float
  bool
  hash
  exact
  term
  fulltext
  trigram
  regexp
  year
  month
  day
  hour
}

input FloatFilter {
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
}

input IntFilter {
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
}

type Label {
  id: ID!
  name: String!
  color: String
}

input LabelFilter {
  id: [ID!]
  name: StringHashFilter
  and: LabelFilter
  or: LabelFilter
  not: LabelFilter
}

input LabelOrder {
  asc: LabelOrderable
  desc: LabelOrderable
  then: LabelOrder
}

enum LabelOrderable {
  name
  color
}

input LabelPatch {
  color: String
}

input LabelRef {
  id: ID
  name: String
  color: String
}

type Mandate {
  id: ID!
  tensions(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!]!
  purpose: String!
  responsabilities: String
  domains: String
  policies: String
}

input MandateFilter {
  id: [ID!]
  purpose: StringFullTextFilter
  and: MandateFilter
  or: MandateFilter
  not: MandateFilter
}

input MandateOrder {
  asc: MandateOrderable
  desc: MandateOrderable
  then: MandateOrder
}

enum MandateOrderable {
  purpose
  responsabilities
  domains
  policies
}

input MandatePatch {
  tensions: [TensionRef!]
  purpose: String
  responsabilities: String
  domains: String
  policies: String
}

input MandateRef {
  id: ID
  tensions: [TensionRef!]
  purpose: String
  responsabilities: String
  domains: String
  policies: String
}

type Mutation {
  addNode(input: [AddNodeInput!]!): AddNodePayload
  updateNode(input: UpdateNodeInput!): UpdateNodePayload
  deleteNode(filter: NodeFilter!): DeleteNodePayload
  addNodeCharac(input: [AddNodeCharacInput!]!): AddNodeCharacPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  deletePost(filter: PostFilter!): DeletePostPayload
  addTension(input: [AddTensionInput!]!): AddTensionPayload
  updateTension(input: UpdateTensionInput!): UpdateTensionPayload
  deleteTension(filter: TensionFilter!): DeleteTensionPayload
  addComment(input: [AddCommentInput!]!): AddCommentPayload
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload
  deleteComment(filter: CommentFilter!): DeleteCommentPayload
  addMandate(input: [AddMandateInput!]!): AddMandatePayload
  updateMandate(input: UpdateMandateInput!): UpdateMandatePayload
  deleteMandate(filter: MandateFilter!): DeleteMandatePayload
  addUser(input: [AddUserInput!]!): AddUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  deleteUser(filter: UserFilter!): DeleteUserPayload
  addUserRights(input: [AddUserRightsInput!]!): AddUserRightsPayload
  addLabel(input: [AddLabelInput!]!): AddLabelPayload
  updateLabel(input: UpdateLabelInput!): UpdateLabelPayload
  deleteLabel(filter: LabelFilter!): DeleteLabelPayload
}

type Node {
  id: ID!
  createdAt: DateTime!
  createdBy(filter: UserFilter): User!
  parent(filter: NodeFilter): Node
  children(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!]
  type_: NodeType!
  name: String!
  nameid: String!
  rootnameid: String!
  mandate(filter: MandateFilter): Mandate
  tensions_out(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!]
  tensions_in(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension!]
  n_tensions_out: Int
  n_tensions_in: Int
  n_children: Int
  isRoot: Boolean!
  first_link(filter: UserFilter): User
  second_link(filter: UserFilter): User
  skills: [String!]
  role_type: RoleType
  charac: NodeCharac!
}

type NodeCharac {
  userCanJoin: Boolean!
  mode: NodeMode!
}

input NodeCharacRef {
  userCanJoin: Boolean
  mode: NodeMode
}

input NodeFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  type_: NodeType_hash
  name: StringTermFilter
  nameid: StringHashFilter
  rootnameid: StringHashFilter
  isRoot: Boolean
  skills: StringTermFilter
  role_type: RoleType_hash
  and: NodeFilter
  or: NodeFilter
  not: NodeFilter
}

enum NodeMode {
  Chaos
  Coordinated
}

input NodeOrder {
  asc: NodeOrderable
  desc: NodeOrderable
  then: NodeOrder
}

enum NodeOrderable {
  createdAt
  name
  nameid
  rootnameid
  n_tensions_out
  n_tensions_in
  n_children
  skills
}

input NodePatch {
  createdAt: DateTime
  createdBy: UserRef
  parent: NodeRef
  children: [NodeRef!]
  type_: NodeType
  name: String
  rootnameid: String
  mandate: MandateRef
  tensions_out: [TensionRef!]
  tensions_in: [TensionRef!]
  n_tensions_out: Int
  n_tensions_in: Int
  n_children: Int
  isRoot: Boolean
  first_link: UserRef
  second_link: UserRef
  skills: [String!]
  role_type: RoleType
  charac: NodeCharacRef
}

input NodeRef {
  id: ID
  createdAt: DateTime
  createdBy: UserRef
  parent: NodeRef
  children: [NodeRef!]
  type_: NodeType
  name: String
  nameid: String
  rootnameid: String
  mandate: MandateRef
  tensions_out: [TensionRef!]
  tensions_in: [TensionRef!]
  n_tensions_out: Int
  n_tensions_in: Int
  n_children: Int
  isRoot: Boolean
  first_link: UserRef
  second_link: UserRef
  skills: [String!]
  role_type: RoleType
  charac: NodeCharacRef
}

enum NodeType {
  Circle
  Role
}

input NodeType_hash {
  eq: NodeType!
}

interface Post {
  id: ID!
  createdAt: DateTime!
  createdBy(filter: UserFilter): User!
  message: String
}

input PostFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  and: PostFilter
  or: PostFilter
  not: PostFilter
}

input PostOrder {
  asc: PostOrderable
  desc: PostOrderable
  then: PostOrder
}

enum PostOrderable {
  createdAt
  message
}

input PostPatch {
  createdAt: DateTime
  createdBy: UserRef
  message: String
}

input PostRef {
  id: ID!
}

type Query {
  getNode(id: ID, nameid: String): Node
  queryNode(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  queryNodeCharac(first: Int, offset: Int): [NodeCharac]
  getPost(id: ID!): Post
  queryPost(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
  getTension(id: ID!): Tension
  queryTension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  getComment(id: ID!): Comment
  queryComment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  getMandate(id: ID!): Mandate
  queryMandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  getUser(id: ID, username: String): User
  queryUser(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  queryUserRights(first: Int, offset: Int): [UserRights]
  getLabel(id: ID, name: String): Label
  queryLabel(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
}

enum RoleType {
  Coordinator
  Peer
  Member
  Guest
}

input RoleType_hash {
  eq: RoleType
}

input StringExactFilter {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
}

input StringFullTextFilter {
  alloftext: String
  anyoftext: String
}

input StringHashFilter {
  eq: String
}

input StringHashFilter_StringRegExpFilter {
  eq: String
  regexp: String
}

input StringRegExpFilter {
  regexp: String
}

input StringTermFilter {
  allofterms: String
  anyofterms: String
}

type Tension implements Post {
  id: ID!
  createdAt: DateTime!
  createdBy(filter: UserFilter): User!
  message: String
  nth: String
  title: String!
  type_: TensionType!
  emitter(filter: NodeFilter): Node!
  receiver(filter: NodeFilter): Node!
  comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment!]
  labels(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label!]
  status: TensionStatus!
  action: TensionAction
  mandate(filter: MandateFilter): Mandate
  n_comments: Int
  emitterid: String!
  receiverid: String!
}

enum TensionAction {
  NewRole
  NewCircle
}

input TensionFilter {
  id: [ID!]
  createdAt: DateTimeFilter
  message: StringFullTextFilter
  nth: StringTermFilter
  title: StringTermFilter
  type_: TensionType_hash
  status: TensionStatus_hash
  emitterid: StringHashFilter_StringRegExpFilter
  receiverid: StringHashFilter_StringRegExpFilter
  and: TensionFilter
  or: TensionFilter
  not: TensionFilter
}

input TensionOrder {
  asc: TensionOrderable
  desc: TensionOrderable
  then: TensionOrder
}

enum TensionOrderable {
  createdAt
  message
  nth
  title
  n_comments
  emitterid
  receiverid
}

input TensionPatch {
  createdAt: DateTime
  createdBy: UserRef
  message: String
  nth: String
  title: String
  type_: TensionType
  emitter: NodeRef
  receiver: NodeRef
  comments: [CommentRef!]
  labels: [LabelRef!]
  status: TensionStatus
  action: TensionAction
  mandate: MandateRef
  n_comments: Int
  emitterid: String
  receiverid: String
}

input TensionRef {
  id: ID
  createdAt: DateTime
  createdBy: UserRef
  message: String
  nth: String
  title: String
  type_: TensionType
  emitter: NodeRef
  receiver: NodeRef
  comments: [CommentRef!]
  labels: [LabelRef!]
  status: TensionStatus
  action: TensionAction
  mandate: MandateRef
  n_comments: Int
  emitterid: String
  receiverid: String
}

enum TensionStatus {
  Open
  Closed
}

input TensionStatus_hash {
  eq: TensionStatus!
}

enum TensionType {
  Governance
  Operational
  Personal
  Help
}

input TensionType_hash {
  eq: TensionType!
}

input UpdateCommentInput {
  filter: CommentFilter!
  set: CommentPatch
  remove: CommentPatch
}

type UpdateCommentPayload {
  comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
  numUids: Int
}

input UpdateLabelInput {
  filter: LabelFilter!
  set: LabelPatch
  remove: LabelPatch
}

type UpdateLabelPayload {
  label(filter: LabelFilter, order: LabelOrder, first: Int, offset: Int): [Label]
  numUids: Int
}

input UpdateMandateInput {
  filter: MandateFilter!
  set: MandatePatch
  remove: MandatePatch
}

type UpdateMandatePayload {
  mandate(filter: MandateFilter, order: MandateOrder, first: Int, offset: Int): [Mandate]
  numUids: Int
}

input UpdateNodeInput {
  filter: NodeFilter!
  set: NodePatch
  remove: NodePatch
}

type UpdateNodePayload {
  node(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node]
  numUids: Int
}

input UpdatePostInput {
  filter: PostFilter!
  set: PostPatch
  remove: PostPatch
}

type UpdatePostPayload {
  post(filter: PostFilter, order: PostOrder, first: Int, offset: Int): [Post]
  numUids: Int
}

input UpdateTensionInput {
  filter: TensionFilter!
  set: TensionPatch
  remove: TensionPatch
}

type UpdateTensionPayload {
  tension(filter: TensionFilter, order: TensionOrder, first: Int, offset: Int): [Tension]
  numUids: Int
}

input UpdateUserInput {
  filter: UserFilter!
  set: UserPatch
  remove: UserPatch
}

type UpdateUserPayload {
  user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
  numUids: Int
}

type User {
  id: ID!
  createdAt: DateTime!
  username: String!
  emailValidated: Boolean!
  emailHash: String
  email: String!
  name: String
  password: String!
  rights: UserRights!
  roles(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!]
  backed_roles(filter: NodeFilter, order: NodeOrder, first: Int, offset: Int): [Node!]
  bio: String
  utc: String
}

input UserFilter {
  id: [ID!]
  username: StringHashFilter
  email: StringHashFilter
  and: UserFilter
  or: UserFilter
  not: UserFilter
}

input UserOrder {
  asc: UserOrderable
  desc: UserOrderable
  then: UserOrder
}

enum UserOrderable {
  createdAt
  username
  emailHash
  email
  name
  password
  bio
  utc
}

input UserPatch {
  createdAt: DateTime
  emailValidated: Boolean
  emailHash: String
  email: String
  name: String
  password: String
  rights: UserRightsRef
  roles: [NodeRef!]
  backed_roles: [NodeRef!]
  bio: String
  utc: String
}

input UserRef {
  id: ID
  createdAt: DateTime
  username: String
  emailValidated: Boolean
  emailHash: String
  email: String
  name: String
  password: String
  rights: UserRightsRef
  roles: [NodeRef!]
  backed_roles: [NodeRef!]
  bio: String
  utc: String
}

type UserRights {
  canLogin: Boolean!
  canCreateRoot: Boolean!
}

input UserRightsRef {
  canLogin: Boolean
  canCreateRoot: Boolean
}

