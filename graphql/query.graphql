#
# Queries and Mutations
#

type Query {
  queryUser: [User]
  queryMandate: [Mandate]
  queryTension: [Tension]
}

type Mutation {
  addUser(input: [AddUserInput!]!): AddUserPayload
  addTension(input: [AddTensionInput!]!): AddTensionPayload
}


#
# Inputs
#

input AddUserInput {
  username: String!
  password: String!
  roles: [RoleRef!]
}

input AddTensionInput {
  title: String!
  message: String
  createdAt: DateTime
  nth: Int
  type_: TensionType!
  emitter: NodeRef
  receivers: [NodeRef!]
  severity: Int
  isAnonymous: Boolean
}

#
# Payloads
#

type AddUserPayload {
  user: [User]
  numUids: Int
}

type AddTensionPayload {
  tension: [Tension]
  numUids: Int
}


#
# References
#


input NodeRef {
  id: ID!
}

input RoleRef {
  id: ID
  title: String
  mandate: String
  createdAt: DateTime
  createdBy: UserRef
  parent: NodeRef
  children: [NodeRef!]
  tensions_out: [TensionRef!]
  tensions_in: [TensionRef!]
  skills: [String!]
  user: UserRef
  second: UserRef
}

input UserRef {
  id: ID
  username: String
  password: String
  roles: [RoleRef!]
}

input TensionRef {
  id: ID
  title: String
  message: String
  createdAt: DateTime
  nth: Int
  type_: TensionType
  emitter: NodeRef
  receivers: [NodeRef!]
  severity: Int
  isAnonymous: Boolean
}
