# <!> Code depencies <!>
# * fractal6.go/web/auth/model: hardocded struct
# * fractal6.go/dp/api: hardocded query
# * fractal6-ui.elm: query and case on enum object 


# Universe (graph of graph)
# @DEBUG: with Union and Node/Leaf (Node = Circle | Role)
#
#type Network {
#  name: String
#  nameid: String
#  nodes: [Node!] @hasInverse(field: network) # root nodes only
#  category: [String!]
#}


#
# Node Interface (Role and Circle)
#

type Node @auth(
  query: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize public data OR Owner
    { rule: """query ($OWNIDS: [String]) {
        queryNode(filter: {visibility: {eq: Public}, or: [{rootnameid: {in: $OWNIDS}}]}) { id }
    }""" },
    # Authorize private data (members only)
    { rule: """query ($ROOTIDS: [String]) {
        queryNode(filter: {visibility: {eq: Private}, and: [{rootnameid: {in: $ROOTIDS}}]}) { id }
    }""" },
    # Authorize secret data (explicit member only)
    { rule: """query ($USERNAME: String!) {
        queryNode(filter: {visibility: {eq: Secret}}) {
          children {
              first_link(filter: {username: {eq: $USERNAME}}) { username }
          }
        }
    }""" }
  ]}
){
  id: ID!
  createdBy: User!      
  createdAt: DateTime!  @search 
  updatedAt: DateTime   

  # Node naming/ID
  name: String!         @search(by: [term])
  nameid: String!       @search(by: [hash, regexp]) @id 
  rootnameid: String!   @search(by: [hash, regexp]) # Convenience to recursively access children

  # Node linking
  parent: Node        # If parent is null, Node is a root node
  children: [Node!]   @hasInverse(field: parent) # @DEBUG union for multi edge graph
  type_: NodeType!    @search 

  # Edges
  tensions_out: [Tension!]   @hasInverse(field: emitter) 
  tensions_in: [Tension!]    @hasInverse(field: receiver)

  # Documents, data, etc.
  about: String      @search(by: [fulltext])
  mandate: Mandate  
  docs: [Blob]      
  source: Blob      
  labels: [Label!]    

  # Node Permission
  visibility: NodeVisibility!   @search # rules of access (R/W)
  mode: NodeMode!               @search # Governance mode (Interpratation of role_type)
  rights: Int!                  # Only used for Bot (v0.5). The right value is a binary AND between all event authorized it the same order they appear in the schema.
  isArchived: Boolean!          @search # Blob source is archived
  # Root node only
  #network: [Network]     @hasInverse(field: nodes)
  isRoot: Boolean!       @search 
  isPersonal: Boolean    @search # Help explore "official" orga - nameid ends with @{username}
  userCanJoin: Boolean   # Rather can ask to join 

  # Role... is a Leaf
  first_link: User        
  second_link: User        # @TODO: User a list of users instead (think this as reserve)
  skills: [String!]        @search(by: [term]) 
  role_type: RoleType      @search # @DEBUG: Waiting Nested filter in Dgragh
  role_ext: RoleExt       

  # Interaction
  contracts: [Vote!]  @hasInverse(field: node) # only for Member role -- named role (@...)

  # Aggregator
  orga_agg: OrgaAgg  @meta(f:"getOrgaAgg", k:"nameid")
}

type NodeFragment {
  id: ID!
  nameid: String    @w_add(a:"lower")
  name: String      @x_set(r:"minLength", n:1)
  about: String     @x_set(r:"maxLength", n:280)
  mandate: Mandate  @x_set
  skills: [String!] @x_alter

  # For Circles
  children: [NodeFragment!] @x_alter # Role only for sub-cirles

  # All the literal below are took into account
  # only when adding a circle.
  # For updates, one need to use the tension Event to update the circle.

  # Charac
  visibility: NodeVisibility
  mode: NodeMode
  type_: NodeType
  first_link: String
  second_link: String
  role_type: RoleType
}

type Mandate {
  id: ID!
  purpose: String!          @x_set @search(by: [fulltext])
  responsabilities: String  @x_set
  domains: String           @x_set
  policies: String          @x_set
}

type Label @auth(
  query: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize public data OR Owner
    { rule: """query ($OWNIDS: [String]) {
        queryLabel { 
          nodes(filter: {visibility: {eq: Public}, or: [{rootnameid: {in: $OWNIDS}}]}) { id }
        }
    }""" },
    # Authorize member 
    { rule: """query ($ROOTIDS: [String]) {
        queryLabel(filter: {rootnameid: {in: $ROOTIDS}}) { id }
    }""" }
  ]}
) @hook_ {
  id: ID!
  rootnameid: String!   @search(by: [hash])
  name: String!         @search(by: [hash, term]) @x_set(r:"unique", f:"rootnameid") @x_set(r:"minLength", n:1) @w_set(a:"lower") 
  description: String   @x_set(r:"maxLength", n:280)
  color: String         @x_set
  tensions: [Tension!]  @hasInverse(field: labels) @x_ro
  nodes: [Node!]        @hasInverse(field: labels) @x_alter(r:"oneByOne")

  # -- @debug : Aggregate count result.
  n_nodes: Int     @x_ro
  n_tensions: Int  @x_ro
}

type RoleExt @auth(
  query: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize public data OR Owner
    { rule: """query ($OWNIDS: [String]) {
        queryRoleExt { 
          nodes(filter: {visibility: {eq: Public}, or: [{rootnameid: {in: $OWNIDS}}]}) { id }
        }
    }""" },
    # Authorize member 
    { rule: """query ($ROOTIDS: [String]) {
        queryRoleExt(filter: {rootnameid: {in: $ROOTIDS}}) { id }
    }""" }
  ]}
) @hook_ {
  id: ID!
  rootnameid: String!   @search(by: [hash])
  name: String!         @search(by: [hash, term]) @x_set(r:"unique", f:"rootnameid") @x_set(r:"minLength", n:1) @w_set(a:"lower") 
  about: String         @x_set(r:"maxLength", n:280)
  role_type: RoleType!  @x_set
  color: String         @x_set
  mandate: Mandate      @x_set
  nodes: [Node!]        @hasInverse(field: role_ext) @x_alter(r:"oneByOne")

  # -- @debug : Aggregate count result.
  n_nodes: Int  @x_ro
  # period of validity ? @future
  # validatedBy  ? @future (vote process...)
}


type OrgaAgg {
  n_members: Int  # count Guest role (root)
  n_guests: Int   # count member role (root)
}

#
# Post Interface (Tension, Comment, Event, etc)
#

interface Post @auth(
  add: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize author
    { rule: """query ($USERNAME: String!) {
      queryPost {
        createdBy(filter: {username: {eq: $USERNAME}}) { username }
      }
    }""" }
  ]}
){
  id: ID!
  createdBy: User!       
  createdAt: DateTime!  @search 
  updatedAt: DateTime                           @x_set(r:"isOwner", f:"createdBy")
  message: String       @search(by: [fulltext]) @x_set(r:"isOwner", f:"createdBy") 
}

type Tension implements Post @auth(
  query: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize public data OR Owner
    { rule: """query ($OWNIDS: [String]) {
        queryTension {
          receiver(filter: {visibility: {eq: Public}, or: [{rootnameid: {in: $OWNIDS}}]}) { id }
        }
    }""" },
    # Authorize private data (members only)
    { rule: """query ($ROOTIDS: [String]) {
        queryTension {
          receiver(filter: {visibility: {eq: Private}, and: [{rootnameid: {in: $ROOTIDS}}]}) { id }
        }
    }""" },
    # Authorize secret data (explicit member only)
    { rule: """query ($USERNAME: String!) {
        queryTension {
          receiver(filter: {visibility: {eq: Secret}}) { 
            children {
                first_link(filter: {username: {eq: $USERNAME}}) { username }
            }
          }
        }
    }""" }
  ]},
  add: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize users that own the emitter role
    { rule: """query ($USERNAME: String!) {
        queryTension {
          emitter {
            first_link(filter: {username: {eq: $USERNAME}}) { username }
          }
        }
    }""" },
    # Authorize Bot emitter
    { rule: """query {
        queryTension {
          emitter(filter: {role_type: {eq: Bot}}) { id }
        }
    }""" }
  ]}
) @hook_ {
  emitterid: String!     @search(by: [hash, regexp]) # @DEBUG: Waiting Nested filter in Dgragh
  emitter: Node!           
  receiverid: String!    @search(by: [hash, regexp]) # @DEBUG: Waiting Nested filter in Dgragh
  receiver: Node!        

  title: String!         @search(by: [fulltext]) @x_set(r:"minLength", n:1) 
  type_: TensionType!    @search 
  status: TensionStatus! @search

  assignees: [User!]      
  labels: [Label!]       
  comments: [Comment!]   @x_alter(r:"oneByOne")
  action: TensionAction  
  blobs: [Blob!]         @hasInverse(field: tension) @x_alter(r:"oneByOne")
  contracts: [Contract!] @hasInverse(field: tension)
  history: [Event!]!     @hasInverse(field: tension) @x_alter # entry point

  # -- @debug : Aggregate count result.
  # We need thiss field to count things with DQL request since it is not yet
  # possible to return a Aggregate cout result in the DQL response.
  n_comments: Int
  n_open_contracts: Int
}

type Comment implements Post @auth(
  update: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize author
    { rule: """query ($USERNAME: String!) {
      queryComment {
        createdBy(filter: {username: {eq: $USERNAME}}) { username }
      }
    }""" }
  ]}
) @hook_ {
  message: String!  @search(by: [fulltext]) @x_set
}

type Blob implements Post {
  tension: Tension!
  blob_type: BlobType!     @search
  pushedFlag: DateTime     @search
  archivedFlag: DateTime   @search

  # data
  node: NodeFragment 
  md: String         
}

type Event implements Post {
  tension: Tension!
  event_type: TensionEvent! @search
  old: String # Store blobid for Commit and Pushed event
  new: String # updated value
}

type EventFragment {
  event_type: TensionEvent! @search
  old: String # Store blobid for Commit and Pushed event
  new: String # updated value
}

type Contract implements Post @auth(
  query: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize public data OR Owner
    { rule: """query ($OWNIDS: [String]) {
        queryContract {
          tension { receiver(filter: {visibility: {eq: Public}, or: [{rootnameid: {in: $OWNIDS}}]}) { id } }
        }
    }""" },
    # Authorize private data (members only)
    { rule: """query ($ROOTIDS: [String]) {
        queryContract {
          tension { receiver(filter: {visibility: {eq: Private}, and: [{rootnameid: {in: $ROOTIDS}}]}) { id } }
        }
    }""" },
    # Authorize secret data (explicit member only)
    { rule: """query ($USERNAME: String!) {
        queryContract {
          tension { 
            receiver(filter: {visibility: {eq: Secret}}) { 
              children {
                  first_link(filter: {username: {eq: $USERNAME}}) { username }
              }
            }
          }
        }
    }""" }
  ]}
) @hook_ {
  # {contractid} is used to perform upsert update of vote and prevent for creating several 
  # auto similar contract. Contractid is set to uid once the contract is closed to prevent blocking
  # the creation of new contract.
  contractid: String! @id # {receiverid}#{TensionEvent}#old#new
  tension: Tension!                    
  status: ContractStatus!      @search 
  contract_type: ContractType! @search 
  closedAt: DateTime           @search  
  event: EventFragment!                
  candidates: [User!]     @hasInverse(field: contracts)  
  participants: [Vote!]!  @hasInverse(field: contract)   # only user node (@...)                  
  comments: [Comment!]    @x_alter(r:"oneByOne")
  isValidator: Boolean    @isContractValidator
}

type Vote implements Post @auth(
  add: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize user with role
    { rule: """query ($USERNAME: String!) {
      queryVote {
        node { first_link(filter: {username: {eq: $USERNAME}}) { username } }
      }
    }""" }
  ]}
) @hook_ {
  # @debug: a vote should trigger a notification but its not evented (contract updated ?)
  voteid: String!  @id # {contractid}#{nameid}
  contract: Contract!
  node: Node! # Named Role (@...)
  data: [Int!]! # Vote results. Maximum len equal len of candidates.
}

#
# User
#

type User {
  id: ID!
  createdAt: DateTime! 
  lastAck: DateTime!   
  username: String!         @id
  name: String              @x_patch(r:"isOwner")
  password: String!         @hidden @x_patch(r:"isOwner") 
  # @DEBUG: Dgraph now support multiple @id, to be tried...
  email: String!            @hidden @search(by: [hash]) @x_patch(r:"isOwner") 
  emailHash: String         @hidden 
  emailValidated: Boolean!  @hidden 
  # Profile
  bio: String  @x_patch(r:"isOwner")
  utc: String  @x_patch(r:"isOwner")
  #skills
  # User Rights
  rights: UserRights!
  # User Roles
  roles: [Node!]                 @hasInverse(field: first_link)
  backed_roles: [Node!]          @hasInverse(field: second_link)
  # User Tensions
  tensions_created: [Tension!]   @hasInverse(field: createdBy)
  tensions_assigned: [Tension!]  @hasInverse(field: assignees)
  contracts: [Contract!]         @hasInverse(field: candidates)
}

# Special rights
type UserRights {
  # Managed in auth handler functions
  canLogin: Boolean!
  # Managed by directives
  canCreateRoot: Boolean! # Bypass input Node authorization/limitation.
  maxPublicOrga: Int! # maximum of private organisation
  type_: UserType!
}

#
# Enum
#

### Node

enum NodeType {
  Circle
  Role
}

enum RoleType { # LeafType
  # Member Type
  Owner # Root member
  Member # member with roles
  Guest # member with no roles
  Retired # Retired member
  Pending # Invited member @todo
  # Role
  Coordinator # Local admin Role
  Peer # Regular Role
  Bot # Aggregator, Bridge etc
}

enum NodeVisibility {
  Public # The entire world
  Private # Only the Organisation members
  Secret # Only the authorized Roles
}

enum NodeMode {
  Coordinated # Coordinator centered
  Agile # Role centered
}

### Tension

enum TensionStatus {
  Open
  Closed
}

enum TensionType {
  Operational
  Governance
  Help
  # Alert # BotAlert. Circle can emit tension ?
  # Poll ?
}

enum TensionAction {
  # Creating
  NewRole
  NewCircle
  NewMd
  # Updating
  EditRole 
  EditCircle 
  EditMd
  # Archiving
  ArchivedRole
  ArchivedCircle
  ArchivedMd
  # -- Extra
  # * Poll ?
  # * Annoucement ?
  # * Articles ?
}

enum TensionEvent {
  # Tension patch
  Created
  Reopened
  Closed
  TitleUpdated
  TypeUpdated
  CommentPushed
  AssigneeAdded
  AssigneeRemoved
  LabelAdded
  LabelRemoved
  BlobCreated
  BlobCommitted
  # --- Trigger Action ---
  BlobPushed
  BlobArchived
  BlobUnarchived
  UserJoined
  UserLeft
  MemberLinked
  MemberUnlinked
  Authority
  Visibility
  Moved
}

enum BlobType {
  # Node
  OnNode
  OnAbout
  OnMandate
  # Doc (md, spreadsheet, etc)
  OnDoc
  #OnDocTitle ?
}

### Contract

enum ContractStatus {
  Open
  Closed 
  Canceled
}

enum ContractType { # Validation type
  # Both coordinators should validate (both are taken from event.old (==tension.receiver.nameid) and event.new
  AnyCoordoDual
  # Validate on given participants
  AnyCandidates
  # -- self contract
  # Validate on the tension emitter node
  AnyCoordoSource
  # Validate on the tension receiver node
  AnyCoordoTarget
}

### User

enum UserType {
  Regular
  Root  # Sytem only
}


# Dgraph.Authorization {"VerificationKey":"checkJwkToken_or_pubkey","Header":"X-Frac6-Auth","Namespace":"https://fractale.co/jwt/claims","Algo":"HS256"}
