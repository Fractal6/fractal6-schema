# <!> Code depencies <!>
# * fractal6.go/web/auth/model: reference to typeName
# * fractal6.go/web/auth/dgraph: when typeName is invoked
# * fractal6-ui.elm: case on enumeration object (NodeType, TensionType ,etc)

#
# Universe (graph of graph)
#
# @DEBUG: with Union and circle/leaf
#type Network {
#  name: String
#  nameid: String
#  nodes: [Node] @hasInverse(field: network) # root nodes only
#  category: String! 
#}

#
# Node Interface (Role and Circle)
#

type Node @auth(
  query: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize public data
    { rule: """query {
        queryNode(filter: {isPrivate: false}) { id }
    }""" },
    # Authorize member 
    { rule: """query ($ROOTIDS: [String!]) {
        queryNode(filter: {rootnameid: {in: $ROOTIDS}}) { id }
    }""" }
  ]}
) @hook_ {
  id: ID!
  createdBy: User!      @patch_RO
  createdAt: DateTime!  @patch_RO @search 
  updatedAt: DateTime   @alter_RO

  # Node naming/ID
  name: String!        @patch_RO @search(by: [term])
  nameid: String!      @patch_RO @search(by: [hash, regexp]) @id 
  rootnameid: String!  @patch_RO @search(by: [hash, regexp]) # to recursively access children

  # Node linking
  parent: Node       @patch_RO # If parent is null, Node is a root node
  children: [Node!]  @patch_RO @hasInverse(field: parent) # @DEBUG union for multi edge graph
  type_: NodeType!   @patch_RO @search 

  # Edges
  tensions_out: [Tension!]  @patch_RO @hasInverse(field: emitter) 
  tensions_in: [Tension!]   @patch_RO @hasInverse(field: receiver)

  # Documents, data, etc.
  about: String     @patch_RO @search(by: [fulltext])
  mandate: Mandate  @patch_RO
  docs: [Blob]      @patch_RO
  source: Blob      @patch_RO

  # --method--
  n_tensions_out: Int  @count(f: tensions_out)
  n_tensions_in: Int   @count(f: tensions_in)
  n_children: Int      @count(f: children)
  stats: NodeStats     @meta_getNodeStats

  # @Debug(#3a99e49): when **union** will be available in Dgraph,
  # Consider using a union `union Node = Role | Circle` with a common SuperNode interface.
  # Furthermore, required field (role_type, charac, can have no semantics depending if tis on Role or Circle
  
  # Node Properties
  isRoot: Boolean!      @patch_RO @search 
  isPersonal: Boolean   @patch_RO @search # (Not public) nameid ends with @{username}
  isPrivate: Boolean!   @patch_RO @search # Invitation required for an R/W access
  isArchived: Boolean!  @patch_RO @search # (Hidden) Blob source is archived
  charac: NodeCharac!   @patch_RO # Root... inherits attributes
  rights: Int!          @alter_RO # Only used for Bot (v0.5). The right value is a binary AND between all event authorized it the same order they appear in the schema.
  labels: [Label!]      @patch_RO  

  # Role... is a Leaf
  first_link: User      @patch_RO
  second_link: User     @patch_RO
  skills: [String!]     @patch_RO @search(by: [term]) 
  role_type: RoleType   @patch_RO @search
  contracts: [Vote!]    @hasInverse(field: node)

  # Root node only
  shared: SharedNode @alter_RO
  #network: [Network] @hasInverse(field: nodes)

}

type SharedNode {
  # This could be utsful to avoid compute count again and again
  # store count and incremets
  # * number of guest
  # * number of members
  # * number of role
  # * number of labels
  # * number of tensions
  # * number of comments
  # * number of circle
  # * number of project
  n_labels: Int
  n_tensions: Int # open and closed
  n_closed_tensions: Int #Closed
}

type NodeFragment {
  id: ID!
  name: String    @alter_minLength(n:1)
  nameid: String  @alter_toLower

  type_: NodeType
  isPrivate: Boolean
  charac: NodeCharac

  about: String   @alter_maxLength(n:280)
  mandate: Mandate

  # For Circles
  children: [NodeFragment!] # Role only for sub-cirles

  # For Roles
  first_link: String
  second_link: String
  skills: [String!]
  role_type: RoleType
}

type Mandate {
  id: ID!
  purpose: String!  @search(by: [fulltext]) 
  responsabilities: String                  
  domains: String                           
  policies: String                          
  # period of validity ? @future
  # validatedBy  ? @future (vote process...)
}


type NodeCharac {
  id: ID!
  # define the governance process
  userCanJoin: Boolean!  @search
  mode: NodeMode!        @search
}

type NodeStats {
  n_member: Int  # count Guest role (root)
  n_guest: Int   # count member role (root)
  n_circle: Int  # recursively count sub circle
  n_role: Int    # recursively count Peer role
}

#
# Post Interface (Tension, Comment, Event, etc)
#

interface Post @auth(
  add: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize author
    { rule: """query ($USERNAME: String!) {
      queryPost {
        createdBy(filter: {username: {eq: $USERNAME}}) { username }
      }
    }""" }
  ]}
){
  id: ID!
  createdBy: User!      @patch_RO 
  createdAt: DateTime!  @patch_RO @search 
  updatedAt: DateTime   @patch_isOwner(u:"createdBy")
  message: String       @patch_isOwner(u:"createdBy") @search(by: [fulltext])
}

type Tension implements Post @auth(
  query: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize public data
    { rule: """query {
        queryTension {
          receiver(filter: {isPrivate: false}) { id }
        }
    }""" },
    # Authorize member 
    { rule: """query ($ROOTIDS: [String!]) {
        queryTension {
          receiver(filter: {rootnameid: {in: $ROOTIDS}}) { id }
        }
    }""" }
  ]},
  add: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize users that own the emitter role
    { rule: """query ($USERNAME: String!) {
        queryTension {
          emitter {
            first_link(filter: {username: {eq: $USERNAME}}) { username }
          }
        }
    }""" },
    # Authorize Bot emitter
    { rule: """query {
        queryTension {
          emitter(filter: {role_type: {eq: Bot}}) { id }
        }
    }""" }
  ]}
) @hook_ {
  emitterid: String!     @patch_RO @search(by: [hash, regexp]) 
  emitter: Node!         @patch_RO  
  receiverid: String!    @patch_RO @search(by: [hash, regexp]) 
  receiver: Node!        @patch_RO

  nth: String            @search #...Upsert in BLL
  title: String!         @search(by: [fulltext]) @alter_minLength(n:1)
  type_: TensionType!    @search 
  status: TensionStatus! @search

  assignees: [User!]     
  labels: [Label!]       
  comments: [Comment!]   @alter_oneByOne  
  action: TensionAction  
  blobs: [Blob!]         @hasInverse(field: tension) @alter_oneByOne
  contracts: [Contract!] @hasInverse(field: tension)
  history: [Event!]!     @hasInverse(field: tension) # entry point

  # --method--
  n_comments: Int  @count(f: comments)
  n_blobs: Int  @count(f: blobs)
}

type Label @auth(
  query: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize public data
    { rule: """query {
        queryLabel { 
          nodes(filter: {isPrivate: false}) { id }
        }
    }""" },
    # Authorize member 
    { rule: """query ($ROOTIDS: [String!]) {
        queryLabel(filter: {rootnameid: {in: $ROOTIDS}}) { id }
    }""" }
  ]}
) @hook_ {
  id: ID!
  rootnameid: String!  @patch_RO @search(by: [hash])
  name: String!        @search(by: [hash, term]) @alter_unique(on:"rootnameid") @alter_toLower @alter_minLength(n:1)
  description: String  @alter_maxLength(n:280)
  color: String
  tensions: [Tension!] @alter_RO @hasInverse(field: labels)
  nodes: [Node!] @hasInverse(field: labels) @alter_oneByOne

  # --method--
  n_nodes: Int     @count(f: nodes)
  n_tensions: Int  @count(f: tensions)
}

type Comment implements Post @auth(
  update: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize author
    { rule: """query ($USERNAME: String!) {
      queryComment {
        createdBy(filter: {username: {eq: $USERNAME}}) { username }
      }
    }""" }
  ]}
) @hook_ {
  message: String!  @search(by: [fulltext]) 
}

type Blob implements Post {
  tension: Tension!
  blob_type: BlobType!    @patch_RO @search
  pushedFlag: DateTime    @alter_RO @search
  archivedFlag: DateTime  @alter_RO @search

  # data
  node: NodeFragment @patch_RO
  md: String         @patch_RO
}

type Event implements Post {
  tension: Tension!
  event_type: TensionEvent! @search
  old: String # Store blobid for Commit and Pushed event
  new: String # updated value
}

type EventFragment {
  event_type: TensionEvent! @search
  old: String # Store blobid for Commit and Pushed event
  new: String # updated value
}

type Contract implements Post @auth(
  query: { or: [
    # Authorize root 
    { rule: "{ $USERTYPE: {eq: \"Root\"} }" },
    # Authorize public data
    { rule: """query {
        queryContract {
          tension { receiver(filter: {isPrivate: false}) { id } }
        }
    }""" },
    # Authorize member 
    { rule: """query ($ROOTIDS: [String!]) {
        queryContract {
          tension { receiver(filter: {rootnameid: {in: $ROOTIDS}}) { id } }
        }
    }""" }
  ]}
) @hook_ {
  tension: Tension!                    @patch_RO
  status: ContractStatus!      @search @patch_RO
  contract_type: ContractType! @search @patch_RO
  closedAt: DateTime           @search @patch_RO 
  event: EventFragment!                @patch_RO
  candidates: [User!]    @hasInverse(field: contracts) @patch_RO 
  participants: [Vote!]  @hasInverse(field: contract)  @patch_RO # only user node (@...)                  
  comments: [Comment!] 
}

type Vote {
  # @debug: a vote should trigger a notification but ist not a contract (contract updated ?)
  id: ID!
  contract: Contract!
  node: Node! # Named Role (@...)
  data: [Int!] # Vote results. Maximum len equal len of candidates.
}

#
# User
#

type User {
  id: ID!
  createdAt: DateTime! @alter_RO
  lastAck: DateTime!   @alter_RO
  username: String!  @id @patch_RO @alter_toLower
  name: String       @patch_isOwner 
  password: String!  @patch_isOwner @hidden 
  # @DEBUG: several @id currentlynot allowed !
  # Q: how to enfore uniqueness ?
  email: String!     @patch_isOwner @search(by: [hash]) @hidden # Only one @id allowing in dgraph.
  emailHash: String        @alter_RO @hidden 
  emailValidated: Boolean! @alter_RO @hidden 
  # User Rights
  rights: UserRights! @alter_RO
  # User Roles
  roles: [Node!]        @hasInverse(field: first_link)  @alter_RO
  backed_roles: [Node!] @hasInverse(field: second_link) @alter_RO
  # User Tensions
  tensions_created: [Tension!] @hasInverse(field: createdBy) @alter_RO
  tensions_assigned: [Tension!] @hasInverse(field: assignees) @alter_RO
  contracts: [Contract!] @hasInverse(field: candidates) @alter_RO
  # Profile
  bio: String @patch_isOwner
  utc: String @patch_isOwner
  #skills
}

# Special rights
type UserRights {
  # Managed in auth handler functions
  canLogin: Boolean!
  # Managed by directives
  canCreateRoot: Boolean! # Bypass input Node authorization/limitation.
  maxPublicOrga: Int! # maximum of private organisation
  type_: UserType!
}

#
# Enum
#

### Node

enum NodeType {
  Circle
  Role
}

enum RoleType { # LeafType
  # Member Type
  Owner # Root member
  Member # member with roles
  Guest # member with no roles
  Retired # Retired member
  Pending # Invited member @todo
  # Role
  Coordinator # Local admin Role
  Peer # Regular Role
  Bot # Aggregator, Bridge etc
}

enum NodeMode {
  Coordinated # Coordinator centered
  Agile # Role centered
}

### Tension

enum TensionStatus {
  Open
  Closed
}

enum TensionType {
  Operational
  Governance
  Help
  # Alert # BotAlert. Circle can emit tension ?
  # Poll ?
}

enum TensionAction {
  # Creating
  NewRole
  NewCircle
  NewMd
  # Updating
  EditRole 
  EditCircle 
  EditMd
  # Archiving
  ArchivedRole
  ArchivedCircle
  ArchivedMd
  # -- Extra
  # * Poll ?
  # * Annoucement ?
  # * Articles ?
}

enum TensionEvent {
  # Tension patch
  Created
  Reopened
  Closed
  TitleUpdated
  CommentPushed
  AssigneeAdded
  AssigneeRemoved
  LabelAdded
  LabelRemoved
  BlobCreated
  BlobCommitted
  # --- Trigger Action ---
  BlobPushed
  BlobArchived
  BlobUnarchived
  UserJoined
  UserLeft
  Moved
}

enum BlobType {
  # Node
  OnNode
  OnAbout
  OnMandate
  OnFirstLink
  # Doc (md, spreadsheet, etc)
  OnDoc
  #OnDocTitle ?
}

### Contract

enum ContractStatus {
  Open
  Closed 
  Canceled
}

enum ContractType { # Validation type
  AnyCoordoDual
  AnyParticipants
  # -- self contract
  AnyCoordoSource
  AnyCoordoTarget
}

### User

enum UserType {
  Regular
  Root
}


# Dgraph.Authorization {"VerificationKey":"checkJwkToken_or_pubkey","Header":"X-Frac6-Auth","Namespace":"https://fractale.co/jwt/claims","Algo":"HS256"}
