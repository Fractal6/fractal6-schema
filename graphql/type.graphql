#
# Node Interface
#

type Node {
  id: ID!
  createdAt: DateTime! @search
  createdBy: User!

  # DEBUG union for multi edge.
  parent: Node # If parent is null, Node is a root node !
  children: [Node!] @hasInverse(field: parent)
  type_: NodeType! @search

  name: String! @search(by: [term])
  nameid: String! @id # Used for URI
  rootnameid: String! @search(by: [hash]) # Index organisation nodes.

  mandate: Mandate
  # validatedBy  # @DEBUG: Birth logics?

  tensions_out: [Tension!] @hasInverse(field: emitter)
  tensions_in: [Tension!] @hasInverse(field: receivers)

  n_tensions_out: Int @count(f: tensions_out)
  n_tensions_in: Int @count(f: tensions_in)
  n_children: Int @count(f: children)

  # see @Debug(#3a99e49)
  # Circle
  isRoot: Boolean! @search
  # Role
  user: User
  second: User
  skills: [String!] @search(by: [term])
}

# @Debug(#3a99e49): when **union** will be available in Draph
# Considered using a union for Role = Circle | Role and _Role interface for both.
# ...
## Supernode/Hyperedge
#type Circle implements Node {
#  isRoot: Boolean! @search
#}
#
## Leaf
#type Role implements Node {
#  user: User
#  second: User
#  skills: [String!] @search(by: [term])
#  #authority: Authority
#}


#
# Post Interface
#

interface Post {
  id: ID!
  createdAt: DateTime! @search
  createdBy: User!
  message: String @search(by: [fulltext])
}


type Tension implements Post {
  nth: Int! @search # @id... Used for URI
  title: String! @search(by: [term])
  type_: TensionType! @search
  emitter: Node! # union @debug: circle can emit tensoin (botAlert)
  receivers: [Node!] # union @debug (circle or tension can receive tension
  isAnonymous: Boolean!
  comments: [Comment!]
  labels: [Label!]

  # Automatic field
  n_comments: Int  @count(f: comments)
}


type Comment implements Post {
  message: String! @search(by: [fulltext])
}

type Mandate implements Post {
  purpose: String! @search(by: [fulltext])
  responsabilities: String
  domains: [String!] # new type v2?
  # Interface:
  #    period:
  #    canValidateNode
  #    number of validation to be modified ? ....
  #    election ???
}

#
# User
#

type User {
  id: ID!
  createdAt: DateTime! @search
  username: String! @id      @input_maxLength(f: "username", n: 42)
  fullname: String           @input_maxLength(f: "fullname", n: 100)
  password: String! @hidden  @input_maxLength(f: "password", n: 42)
  roles: [Node!] @hasInverse(field: user) @input_ensureType(f: "roles", t: Role)
  backed_roles: [Node!] @hasInverse(field: second) @input_ensureType(f: "backed_roles", t: Role)
  bio: String
  #skills
}

#
# Labels
#

type Label {
  id: ID!
  name: String! @id @search(by: [hash])
  color: String
}



#
# Enum
#

enum NodeType {
  Circle
  Role
}

enum TensionType {
  Governance
  Operational
  Personal
  Help
  Alert # BotAlert
}
