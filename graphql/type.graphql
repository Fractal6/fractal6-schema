#
# Node Interface
#

interface Node {
  id: ID!
  createdAt: DateTime! @search
  createdBy: User!

  parent: Node # If parent is null, Node is a root node !
  children: [NodeUnion!] @hasInverse(field: parent)

  name: String! @search(by: [term])
  nameid: String! @id # Used for URI
  mandate: Mandate
  # validatedBy  # @DEBUG: Birth logics?

  tensions_out: [Tension!] @hasInverse(field: emitter)
  tensions_in: [Tension!] @hasInverse(field: receivers)

  n_tensions_out: Int @count(f: tensions_out)
  n_tensions_in: Int @count(f: tensions_in)
  n_children: Int @count(f: children)
}

# Supernode/Hyperedge
type Circle implements Node {
  isRoot: Boolean! @search
}

# Leaf
type Role implements Node {
  user: User
  second: User
  skills: [String!] @search(by: [term])
  #authority: Authority
}

union NodeUnion = Circle | Role

#
# Post Interface
#

interface Post {
  id: ID!
  createdAt: DateTime! @search
  createdBy: User!
  message: String @search(by: [fulltext])
}


type Tension implements Post {
  nth: Int! @search # @id... Used for URI
  title: String! @search(by: [term])
  type_: TensionType! @search(by: [hash])
  emitter: Node!
  receivers: [NodeUnion!]
  isAnonymous: Boolean!
  comments: [Comment!]
  labels: [Label!]

  # Automatic field
  n_comments: Int  @count(f: comments)
}


type Comment implements Post {
  message: String! @search(by: [fulltext])
}

type Mandate implements Post {
  purpose: String! @search(by: [fulltext])
  responsabilities: String
  domains: [String!] # new type v2?
  # Interface:
  #    period:
  #    canValidateNode
  #    number of validation to be modified ? ....
  #    election ???
}

#
# User
#

type User {
  id: ID!
  createdAt: DateTime! @search
  username: String! @id      @input_maxLength(n: 42, f: "username")
  fullname: String           @input_maxLength(n: 100, f: "fullname")
  password: String! @hidden  @input_maxLength(n: 42, f: "password")
  roles: [Role!] @hasInverse(field: user)
  backed_roles: [Role!] @hasInverse(field: second)
  bio: String
  #skills
}

#
# Labels
#

type Label {
  id: ID!
  name: String! @id @search(by: [hash])
  color: String
}



#
# Enum
#

enum NodeType {
  Circle
  Role
}

enum TensionType {
  Governance
  Operational
  Personal
  Help
  Alert # BotAlert
}
